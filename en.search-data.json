{"/blog/about/":{"data":{"":"In the blog you will find reflections and learnings about my life in general.\nI do not pretend to be an example of anything or anyone, the opinions I leave here are mine, I hope not to offend anyone with them.\nMy name is Luis Pedro -luispe- I am 38 years old, I was born and raised in Gonnet, a town in La Plata, BsAs, Argentina. From my childhood I keep a ton of friends with whom I have shared 35 years, now that I am writing this is crazy. They are my guide and my grounding cable, if I am what I am it is in part thanks to them and my family ‚ù§Ô∏è\nSince I was very young I played soccer in the club Gimnasia y Esgrima de La Plata, after many years when I was in the 7th division I had to make the decision if soccer was going to be my professional destiny or a sport, the decision was to be a sport, this chapter deserves a separate publication.\nWhen I finished high school in La Plata I studied and graduated from the conservatory Gilardo Gilardi and at the same time I also graduated from a tertiary jazz school (EMU).\nAfter several albums, recitals and rehearsals I decided to turn my life around and started studying at the UTN (FRLP) the career of systems engineering.\nIn 2012, I started working in technology and thanks to it I made several friends that I still and fortunately keep, I will not name them because I‚Äôm afraid of forgetting more than one or one.\nAfter several years and now that I am writing it 38 and counting, it is a good time to write, I consider it a good channel to channel my feelings that adds to a good wine, music my family and friends.\nSo, here it goes‚Ä¶ I hope you enjoy it!"},"title":"Hi üëãüèº"},"/blog/posts/career/":{"data":{"":"Anniversaries, be it a birthday, the end of the year or whatever, generally lead one to reflect.\nThis case would not be the exception, what is the anniversary, less than a month ago i completed one year in my current company (Pomelo), August 29, 2022 the promotions in the company were made public, I am part of the people who were promoted, I wanted to write some conclusions that I have drawn from these 365 days, two teams and a promotion.","pillars#Pillars":"Those who know me whether in my work or in my personal life, hear me talk about three principles with which I try to mobilize myself and i search around me:\nTrust Humility Respect Trust I will try to explain what this pillar means to me.\nIn one of my first publications where I talk about mistakes and learnings, I talk about the fact that moving up should not be the only or main goal, there are much, much more important things and confidence is one of them.\nOk luispi, but what does that have to do with trust?, here we go.\nBeginnings My first approach to Pomelo was through Maru, we already knew each other, Maru was the one who did the hiring process when I joined MercadoLibre, then we were close to meet again in Naranja X, but the impasse served well to meet again professionally in Pomelo, I tell this precisely because of the term of trust.\nDo you think Maru would have trusted me not just once, but twice, I don‚Äôt think so, she is an absolutely admirable person in building technology teams, and that trust we have in each other makes her trust me again and again and call me back:\nMaru trusts me again and again and calls me back. On my side, I take that trust and build (or try to build) the best possible work context. Meeting and mismatching In the more than 365 days that I have been in Pomelo I worked almost half of the time in the Processor team, I met again with familiar faces and met some new ones, I will name them, first the anecdote.\nI was at the Processor for a little more than 5 months, we reached the milestone (madness) of having the processor up and running and then in mid-January 2022 I moved to the infra team. Here two pillars were played, trust and respect, why I say this, the guys knew where I wanted to direct my career and supported me 100%.\nHowever, 7 months later they showed me that they are people in which I will trust infinitely beyond Pomelo, these people are: Brizi, Dami and Nico, I will not tell the details they know what I mean, but I wanted to thank them publicly ‚ù§Ô∏è.\nWith you, to the war with a toothpick I talked about my first stage in Pomelo, let‚Äôs move on to the second, ‚ÄúMigration to the Infrastructure team‚Äù.\nFrom January to this part and from minute zero Juanjo and Gus and knowing me, I would say nothing, gave me the space to create a space for debates and cross-examination. They listened to my proposals, made them their own, and together we carried them forward, they made parts of theirs I took them as my own and so surrounded by a pile of people with a human quality of another planet we did and we are doing incredible things.\nWhat is the point of all this, that getting promoted is not the main or only goal, building trust around you is countless times more important and is, at least in the values I pursue and seek, infinitely superior to any position we hold or obtain. any position we hold or obtain.\nFor now I do not want to bore or extend, soon I will write about the other two pillars that I feel indispensable to walk through life, humility and respect."},"title":"Anniversaries"},"/blog/posts/hexagonal-architecture/":{"data":{"":"","lets-start#Let\u0026rsquo;s start":"This is the first of a series where we will review different development patterns that I made mistakes and what is currently and what I understand so far, the best way to apply it.\nAs the title of the publication says, today I want to talk about hexagonal architecture.\nPreface I have been noticing a lot of ‚Äúhype‚Äù around the hexagonal architecture and I would like to be clear about it, I am not against it, on the contrary, I think it is an excellent pattern.\nBut I think we fall into the mistake of applying the publishing recipes of ‚Äúmedium‚Äù and not only end up with all the layers of our system coupled but with package names like ‚Äúadapters‚Äù or ‚Äúports‚Äù and if there is something beautiful in the language of Go(lang) is the intentionality in the name of a package.\nA good name on the package means that almost nothing else is needed to express the intentionality of the package.\nI share and recommend you to read the following official publication, personal opinion, applies to any language.\nLet‚Äôs start Anti pattern\nAnnotation in our domain model e.g json.\nOne mistake I used to make is having json or gorm annotations or any annotations in the domain model.\nLet‚Äôs imagine that we have our /user/user.go model with the following content\ntype User struct { FirstName string `json:\"first_name\"` LastName string `json:\"last_name\"` } Before reading on, I invite you to take a few seconds/minutes to reflect on why this is an anti-pattern.","preface#Preface":"","proposallearning#Proposal/learning":"Our model should be presentation and data layer agnostic, therefore, it should not contain any annotations. We should map the data to our model and vice versa, here is an example of what a rest HTTP controller would look like e.g.:\nuser/rest_controller.go\ntype UserDTO struct { FirstName string `json:\"first_name\"` LastName string `json:\"last_name\"` } func (ctrl *controller) toUserModel(userDTO *UserDTO) *User { return \u0026User{ FirstName:\tuserDTO.FirstName, LastName:\tuserDTO.LastName, } } func (ctrl *controller) toUserDTO(user *User) *UserDTO { return \u0026UserDTO{ FirstName:\tuser.FirstName, LastName:\tuser.LastName, } } As we can see in the previous example the private methods in the rest controller map from the data transfer object to the domain model when we call the service and vice versa.\nFinally, we remove the annotations in our user/user.go model.\ntype User struct { FirstName string LastName string } All good luispi, but what gain did we get?\nNow our /user/user.go not having any annotation no matter how we present or how we obtain/persist the data, we will never touch the core/domain of our application, now we could affirm that our core/domain is agnostic to the presentation or data layers gaining flexibility, testing, etc.\nSo as not to bore you and for the moment let‚Äôs take a break.\nSoon we will continue with small publications where we will try to rethink other anti-patterns.\nHave a good time! üëãüèΩ"},"title":"Hexagonal Architecture"},"/blog/posts/interfaces-correct-use/":{"data":{"":"In the following post I want to share a common mistake I used to make in my Golang projects. And as the title and description says, today we are going to talk about interfaces.\nYou will probably come across some references to another post I did on hexagonal architecture, I think part of the misuse of interfaces is the consequence of following ‚Äúmedium‚Äù publications to the letter and not taking the time to understand the underlying concept.","conclusions#Conclusions":"With these subtle but powerful changes our producer now has enormous flexibility.\nFinally, I want to thank my friend and mentor morenojp who shared with me this anti pattern and made me rethink and improve, once again, in this software development.\nSo as not to bore you and for the moment let‚Äôs take a break.\nSoon we will continue with small publications where we will try to rethink other anti-patterns.\nHave a good time! üëãüèΩ\nSources:\nwiki oficial de Golang go interfaces misuse ","preface#Preface":"If there is something that we have to admit in the Golang ecosystem, it is the kink that we sometimes give ourselves with some/several issues. To give an example on how to name variables (which is a topic I want to talk about soon) and in today‚Äôs case with interfaces.\nGolang has its particularities, but it is based on many patterns already known in the industry. In the Go ecosystem sometimes we complex some patterns and fall into ‚Äúanti patterns‚Äù, in the next post we will review a fake project and refactor it to make good use of the interfaces.\nTo simplify the publication a bit, we will narrow down the use case and reduce it to the service and repository layer.\nLet‚Äôs imagine that in the repository layer we find the following:\npackage repository import ( // pkg imports ) type Repository interface { Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) } type repository struct { // repository client and configs go here } func NewRepository() Repository { return \u0026repository{} } func (repo *repository) Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) { // previous logic here return repo.toModel(beerEntity), nil } And in the service layer the following:\npackage service import ( // pkg imports ) type Service interface { Create(ctx context.Context, model *Beer) (*Beer, error) } type service struct { repo Repository } func NewService(repo Repository) Service { return \u0026service{repo: repo} } func (svc *service) Create(ctx context.Context, model *Beer) (*Beer, error) { beer, err := svc.repo.Save(ctx, model) if err != nil { return nil, err } return beer, err } The above scenario is the one I commonly encounter in Go projects and I want to tell you that I also made the same mistake.\nAll good luispi, but what‚Äôs the mistake?\nGo interfaces generally belong to the package that uses values of the interface type, not to the package that implements those values. ü´†","proposallearning#Proposal/learning":" The implementation package must return concrete types (usually pointer or struct): that way, new methods can be added to implementations without requiring extensive refactoring.\nWith this in mind, let‚Äôs get to work\nFirst, let‚Äôs attack the repository layer, as the previous note says, we are going to return a structure and not the interface.\npackage repository import ( // pkg imports ) type Repository struct{ // repository client and configs go here } func NewRepository() Repository { return Repository{} } func (repo *Repository) Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) { // previous logic here return repo.toModel(beerEntity), nil } Let‚Äôs review the change.\nFirst we remove the interface and now the NewRepository() function returns the Repository structure, and second we add to Repository the save method.\nAll well and good luispi, but what do we gain with this change?\nSince we do not have to comply with any interface contract we are not tied to having to implement all the methods that the interface has.\nWe have to think of this package as a producer (producer) and always keep in mind that producers, again, return concrete types (usually a pointer or a structure).\nNow it is the turn to edit the consumer layer, in this case the service.\npackage service import ( // pkg imports ) type Repository interface { Save(ctx context.Context, beer *Beer) (*Beer, error) } type Service struct { repo Repository } func NewService(repo Repository) Service { return Service{repo: repo} } func (svc *Service) Create(ctx context.Context, beer *Beer) (*Beer, error) { createBeer, err := svc.repo.Save(ctx, beer) if err != nil { return nil, err } return createBeer, err } Let‚Äôs review the change.\nWe make several changes, first we declare the Repository interface and in the Service structure we inject the interface so that it can be consumed in the service methods.\nAs with the repository layer our NewService() now returns a structure and not an interface.\nFinally, we add the Create method to our Service."},"title":"Interfaces and \"copy paste\""},"/blog/posts/lightweight-container-image/":{"data":{"":"","lets-start#Let\u0026rsquo;s start":"In the following post I am going to share with you some tips and best practices to develop our container images, as an example we are going to create an image for an app in Golang, but the following tips apply to any language, let‚Äôs go!\nPreface To make our container images as small as possible in terms of weight (megabytes, gigabytes, etc.) is not a matter of taste, it helps us in many ways, here are some of them:\nReduce storage costs in the registry we use to manage our images. When we have to obtain the image to start the container it is clear that the lighter it is the faster the initialization of the container will be, and with this we win in two points. Costs, and by costs we mean the use of the networking we use to obtain the image and then initialize the container. Speed in auto scaling, it is clear that to obtain a 20 MB image versus a 900 MB image the first one, of course, is going to initialize with a higher speed. To give a few examples.\nLet‚Äôs start Let us imagine that we have the following Dockerfile to create our container image e.g:\nFROM golang:1.18 WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main ENTRYPOINT [\"/myapp\"] Let‚Äôs build our docker build -t myapp:0.0.1 . image.\nIf we list the images that we have in our host we will be able to observe that the weight is approximately 968 MB.\nWhat? 968 MB just to make available a binary that weighs a few megabytes?\nNOTE\nIn all my publications you will find concepts, the idea is that we learn and not copy and paste.\nTo give an example RUN go build -o ./myapp ./path/to/main where ./path/to/main should be the main of your Golang app","preface#Preface":"","proposallearning#Proposal/learning":"Let‚Äôs go with the first proposal. It is always a good practice to use -alpine images, by convention in the container universe when we make available an -alpine image we are indicating to the client that it is an image reduced in size and the one we should use in our Dockerfile, among other things.\nWell, let‚Äôs make a small change in our Dockerfile and build our image again\nFROM golang:1.18-alpine3.16 WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main ENTRYPOINT [\"/myapp\"] If we pay attention the change was subtle, but effective, we went from FROM golang:1.18 to FROM golang:1.18-alpine3.16.\nLet‚Äôs build our docker build -t myapp:0.0.2 . image again.\nIf we list the images again we will find that now the myapp:0.0.2 image weighs approximately 331 MB.\nWe reduce, if the accounts do not fail, 637 MB.\nIt‚Äôs an excellent approach, but let‚Äôs rethink: do you have to have an image with all of Golang inside the container weighing about 331 MB to make available a binary that weighs a few megabytes?\nThe answer is clearly, no.\nSecond proposal The container technology has an excellent feature, that for our case, will help us to build a very light container image, in case you didn‚Äôt know, I‚Äôm talking about Multistage, I share with you the official documentation to deepen about this feature.\nWhat does Multistage consist of? It is about building images in stages so that we can share data between each one of them, and we will obtain a final image of a very small size.\nThe first thing we are going to do is to have a first stage of build, where we are going to build the binary, and a second stage where we are going to make it available for use.\nLet‚Äôs get to work, let‚Äôs open and make the following modifications to our Dockerfile.\n# First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\"/myapp\"] As we can see, the first modification consists of tagging the first stage as a build. Then in the second and final stage with the following line COPY --from=builder /build/myapp /myapp we copy the binary from the stage that we have selected as builder and we make it available in an alpine image.\nIf we list now our images we can see that it weighs approximately 9 MB, yes yes, I wrote correctly 9 megabytes üòé.\nWe could do one last optimization or best practice, but I think it‚Äôs worth leaving it for another post.\nSo as not to bore you and for the moment let‚Äôs take a break.\nHave a good time! üëãüèΩ"},"title":"Size matters"},"/blog/posts/mistakes-and-learnings/":{"data":{"":"In our society in general and in technology in particular, we have the strange habit of publishing success stories (opinion of the writer, wrongly called successful case) and few, if any, occasions where mistakes are shared (opinion of the writer, wrongly called failure).\nAs you might be suspecting below I am going to share some mistakes, which I learned from them and even more how much I grew and understood about the industry by sharing them.","lesson-1#Lesson 1:":" Write a step-by-step, share it, validate and re-validate it before executing anything\nMy first productive development was in 2012 (?) approximately, it was a website for a company that needed to publish its product catalog, I list technologies to have some context:\ndigitalocean, just released, in addition to the droplets, I don‚Äôt know how many more products I had in my portfolio angular js (angular 1) I think nodeJS for the backend This development was done with one of the people I respect and admire the most, Victor De Grandis -Vitor-.\nMy experience configuring servers was null, I had the delirious idea of telling Vitor:\n_my friend, can I set up the server, and then you try to break it?\nThen I started to make several configurations, among them, I started to play with the ports, until I proudly told him:\nVitor, try to see what happens.\nAfter a while I receive a message,\nmy friend, could it be that you closed port 22?\nBeautiful, I left the house, locked the door and threw the key into a pond.\nAs the digitalocean people are prepared for people like this writer, they have a feature that if accessed from the web (I have no idea how to solve it from behind) you can run a terminal in the browser and access the droplet.\nI reconfigured the ports, and the rest is history.","lesson-2#Lesson 2:":" Document knowledge, no matter how trivial we consider it, and invite others to do the same. In addition to avoiding several ‚Äúknowledge transfer‚Äù meetings, we will save several arrobas, remind you anything?\n@fulanito may be able to help you\nIn another team that I had the fortune to work in, small in number of people but from which I learned a lot, a lot from each one of them, unfortunately the adventure was very short in time.\nWhat I did find very strange as one by one people were leaving the team is that we were losing a lot of knowledge to the point of stopping engines (literally) and going weeks without delivering features to production because we had to sit down and figure out how to leave that local line of code and expose it to the internet.\nWhat mistakes did I detect and what did I learn?\nDocument knowledge, however trivial we may consider it, document it.\nOr perhaps, and I invite you to think for a few seconds, did you find yourself one or more times holding ‚Äúknowledge transfer‚Äù meetings because someone was leaving the team?\nOr was it you who was leaving him?","lesson-3#Lesson 3:":" Job promotions should not be the only or the main objective, but the guide should be to share and acquire knowledge.\nLesson 3 bis:\nThinking and testing before implementing anything is a fundamental guide to understanding the behavior of our systems or the domain knowledge we have so far. Always, and let‚Äôs repeat, always, it is a gain in time.\nFinally, and in another place I worked, I met one of the best problem solvers, Juan Moreno, what is better for me, simple solutions to complex problems.\nAfter this small parenthesis and dedication to the one who today is one of my sources of consultation, reference and mentor, I am going to try to explain teaching number 3 and 3 bis.\nIn pre-pandemic times, I used to - a habit I still have from afar - start early, having a couple of hours ‚Äúalone‚Äù allows me to focus and prioritize as much as possible the things I want to do and have committed to do.\nOne of those mornings and as a consequence of a functionality that we were developing in the team, the leader arrived a little angry (to be kind) and grabbed the first ones he found from the team, thus being able to vent his anger because he had ‚Äúlooked bad‚Äù to his superiors because of all the casuistry there was a case that broke.\nFamous Take a breath and after a few minutes I joined him alone, I asked him a question:\nhow many people are involved in this functionality?\nHe understood with the question that he should have waited and told the whole team responsible what had happened and not grabbed the first people who crossed his path.\nFinally, I told him that I understood but did not share his anger or how he had handled it.\nI want to clarify that my intention is not to judge, but to share that I learned from that mistake, again:\nJob promotions should not be the only or main goal, you run the risk of being under enormous pressure not to rise to the occasion. Sharing and acquiring knowledge should be the guide.\nThinking and testing before implementing anything is the fundamental guide to understanding the behavior of our systems or the domain knowledge we have so far. Always, and let‚Äôs repeat, always, it is a gain in time.\nTo conclude, I understand that I will continue to make mistakes and share the experience they left me with, that does not make me any worse or better than anyone else.\nI am convinced that it is a healthy way of going through life where the ‚Äúnormal‚Äù thing to do is to be ‚Äúsuccessful‚Äù or as I like to make parallels with soccer, ‚Äúplaying for the stands‚Äù, but at the end of the day it is only an appearance.\nThank you for reading! üëãüèΩ"},"title":"You learn from your mistakes, and if you share them, you grow."},"/blog/posts/technical-debt/":{"data":{"":"In the following post we will rethink a concept commonly encountered and endorsed\nin the technology industry, technical debt.","conclusions#Conclusions":"The technical debt is very exhausting for the teams and where today we think we are gaining time, I assure you that soon, very soon, we will lose agility and speed in the development.\nIt can be avoided in most cases, and we do not accept it as a matter of course.\nFinally, I hope that we will rethink together the ‚Äútechnical debt‚Äù and that we will be uncomfortable with it.\nThank you for reading! üëãüèΩ","different-yardstick#Different yardstick":"Let‚Äôs imagine that we need to paint the exterior of our house, and we decide to hire a professional to do the job.\nAfter consulting several quotes we decided to hire the services of ‚Äúx‚Äù to take care of the job.\nAfter a few days ‚Äúx‚Äù tells us:\n- The work is finished.\nWe stood at the front of the house and noticed that around the window frames it is unpainted in some cases.\nNoticing this, we ask ‚Äúx‚Äù why he did not paint around the window frames, to which he responds:\n- Sorry, it is a technical debt that I can attack in the future.\nHow would you feel if you encountered such a situation?\nWhy in the context of technology do we endorse having technical debt?","rethink#Rethink":"In technology, it is very common to encounter this scenario, and unfortunately we naturalize it and as I commented in a previous publication where I talk among other things about the importance of documenting and testing, it is something common that I always see as ‚Äútechnical debt‚Äù, rethinking the example of painting the house I think it exposes how we can have ‚Äúdifferent yardsticks‚Äù to measure the same situation in different contexts.\nWhy is technical debt harmful?\nIn test context: it is extremely difficult to make changes without exploding everything. In context of documentation: it is extremely difficult to add functionality because the lack of documentation causes us to waste an enormous amount of time trying to understand how things are built. In a team context: having technical debt means that the knowledge stays with the people and we should always, always encourage knowledge to be distributed. "},"title":"Technical debt"},"/blog/posts/ticket-hell/":{"data":{"":"","lets-go-back-to-the-beginning#Let\u0026rsquo;s go back to the beginning":"Problem If you only have a hammer, all problems look like a nail.\nWhy do I start with this well-known phrase?, first I want to give a little history and then I will explain why I mention it.\nIn the infrastructure teams in which I have been working and leading for some years I had the great fortune to cross paths with Juanjo. From minute zero I heard him say, promote and defend him to the hilt:\n- Never fall into an infrastructure team that works by ticketing orders\nPositioning What is the rationale behind this firm position?\nYou have to have an extremely strong end-to-end culture to be able to determine which ticket is more important than another. The infrastructure team inherently has to grow if the technology and product team expands into new functionality. It is extremely difficult to keep the infrastructure team motivated. It is impossible to innovate from the infrastructure team. There are several other reasons, but at this point I consider them to be the most important and I will explain each one of them.\n1. Extremely strong culture Both infrastructure and QA teams are not usually involved in the roadmap and technology and product sprint. In case it happens, it is done at the end of the mile ‚Äúwhen everything is already cooked‚Äù.\nWhere am I going with this?, that if the infrastructure manager gets two tickets and has to prioritize due to execution capacity issues, the obvious question:\nwhich ticket do I prioritize?\nGood luck when you are there, because for customers theirs is the most important thing in the world, and it is the most important thing above anything else.\n2. Growth without sense Let us suppose that the previous point is solved, this point that I am going to explain next will not escape.\nWhy do we say that infrastructure equipment inherently has to grow?\nIf we fall into tickets that only the infrastructure team solves, the more products and functionalities the company has, the more people are needed from the infrastructure team to attack the demand for tickets.\nCongratulations, you have created an execution funnel.\nSolution? hire more talent for the infrastructure team.\n3. Motivation Assume that points 1 and 2 are solved.\nThe members of the infrastructure team are human, right?\nI say this because it is difficult to maintain motivation if ‚Äìin a job that is highly creativity-driven‚Äì we limit team members to ‚Äúclosing tickets‚Äù without any room for discussion or double-questioning.\nWhat can happen, high turnover in the infra team and a discomfort in the technology teams that, if they are toxic, can accuse the infra team of blocking or bad experience in infrastructure management.\nWhat can I tell you about the latter, Keep Calm and I leave you a big hug.\n4. Innovation Finally, if we have solved the previous 3 points, it is impossible to innovate, plain and simple.\nWhy? A team that works simply closing tickets, focused only on participating in a project by creating infrastructure, cannot possibly innovate.\nLet‚Äôs go back to the beginning If you only have a hammer, all problems look like a nail.\nThroughout the post I explained the rationale and the most important points that a ticketing methodology for infrastructure management will impact.\nAnd I want to make it clear that it is not wrong to work by tickets in an infrastructure team, what is definitely wrong is that infrastructure management is done by tickets.\nAnd what does the hammer phrase? have to do with the fact that an agile methodology was poorly implemented in many companies with the infrastructure teams and ‚Äúwe must stop the ball‚Äù to reflect on why things are not working well in many places.\nAnd how can we avoid it?\nWe must inject a product mindset into infrastructure teams, provide abstractions with top-level experiences of the underlying platform chaos so that product technology teams are self-sufficient in managing the software and associated infrastructure.\nI hope my experience will make you rethink how to form culture and work processes for infrastructure teams in the company if you have questions or need to discuss anything of what I wrote I am happy to meet you :)\n¬°Have a good time! üëãüèΩ","positioning#Positioning":"","problem#Problem":""},"title":"The ticket Hell"},"/blog/posts/we-should-allmanageteams/":{"data":{"":"","be-yourself-dont-manage-from-books#Be yourself, don\u0026rsquo;t manage from books":"For context in case you happened to come across this post, I‚Äôm going to speak from the technology industry, a deeply technical industry, and how leading teams, at least for a period of time, can help the team and yourself, both professionally and personally.\nHow it impacts your anxiety and that of the team to manage it I am from Argentina, a country with the highest number of psychologists per inhabitant, it is neither a good nor a bad thing, in fact I have been doing therapy for more than ten years to rethink myself and to rethink society.\nI bring this data because of the subject of anxiety and it deserves a separate chapter, as social networks have intensified this phenomenon.\nBut let‚Äôs get back to the point I want to develop, anxiety in team management.\nWe live in a society that is in a hurry to get where we develop applications that encourage sharing videos of seconds because we can not stand to see a video longer than 30 seconds, where sharing information has to be compressed into 140 characters and if it is a longer thread uf not even want to read it. In this context of anxiety, managing and developing teams is a huge challenge, almost titanic I would say.\nStolen from a lecture by Paenza full lecture\nThere should be no other year in a person‚Äôs life where one incorporates so much information, learns so much, changes so much in quality of life, as from 0 to 1 year of age.\nWhere am I going with this point?\nThe contributions that one makes to the team and the people are very, veeeery slow, and in most cases almost imperceptible and you will have to learn to manage your anxiety and support the team to manage theirs.\nAnother point that I find very curious is that ability (and this is also commented by the great Paenza in the talk I shared with you recently) to have zero patience to face a problem, we need answers for everything, and yes, that is partly due to the anxiety we handle. Let‚Äôs encourage the ability to solve problems, not everything in life has a solution and there are no answers for everything.\nLet‚Äôs encourage the ability to solve problems, not everything in life has a solution and there are no answers for everything.\nFinally, in many companies it is common to encounter performance review processes twice a year and I would like to leave a question in the air.\nDo we really believe that a person can make an evolution within six months?\nAnd here the fragment of Paenza‚Äôs talk makes more sense.\nThere should be no other year in a person‚Äôs life where one incorporates so much information, learns so much, changes so much in quality of life, as from 0 to 1 year of age.\nThe quest for quick feedback to feel valuable One of the things I would have loved to have been advised on when I started managing and leading teams is to look for things that give me a quick return of dopamine.\nWhen you are leading and managing teams, change processes are very slow and you tend to think that you are useless and that you are not doing ‚Äúanything productive‚Äù, calm down.\nI don‚Äôt like tips and tricks, but something that helped me and that I would have liked to be advised is to look for what makes you happy, write a piece of code or refactor, document, anything, but something that makes you feel that you are contributing value to the team, again, already leading and making decisions bring a brutal value, the problem is that it is imperceptible and one is human and needs to feel useful and valuable.\nDo I have personal growth? What would happen if we lead a team for at least one year?\nEven if it is not your chosen career path, leading and managing a team will provide you with very important tools, more important than any software design and architecture pattern.\nYou will learn to control your emotions, egos, frustrations, you will learn to negotiate, trust, advise, direct, ask for forgiveness and show your vulnerability, I could go on for a long time, but I think I can explain the level of information and tools it can give you.\nThe answer is yes, you are going to have personal and clearly professional growth.\nThe obvious, not everything has to go through you, nor do you have to be aware of everything How many times have you crossed paths with ‚Äútoxic leaders‚Äù, What is toxic for me?\nThose people who are funnel, everything has to go through them, all the time they need different decisions to go through them and almost 100% of the time their decisions predominate.\nWhat do I propose?\nLet‚Äôs promote and accompany the growth of the people in the team and the team, let‚Äôs share knowledge and be open to new ideas and proposals.\nPersonally speaking the day I went on vacation and everything followed its course, we even took out functionalities, we communicated them and when you come back you don‚Äôt have that feeling of FOMO it‚Äôs the glory.\nI leave the question in the context of when you come back or someone comes back from vacation and you hear it daily.\nUff I‚Äôve been going through all the emails and slack messages to catch up\nShouldn‚Äôt projects take their natural course without you being present?\nExploit the virtues and reflect on the improvements, both are equally important I am going to state the obvious, we all have good and bad things.\nPlease when you have 1.1 talk about both things, exploit and emphasize the virtues and reflect on the improvements, if you only highlight the improvements ‚Äúor what is wrong‚Äù it is distressing for the person on the other side, he/she will feel that nothing is enough and nothing is right. On the contrary, if you only highlight the virtues and do not take the time to talk about the improvements, you will not drive change and improvement in the person‚Äôs life and career.\nAgain exploit the virtues and reflect on the improvements, both are equally important.\nBe yourself, don‚Äôt manage from books Lastly, and this may also be a truism, but be yourself, you feel miles away when someone is talking to you from a prepared speech or tips from a leadership book.\nWe all are and continue to learn, you too.","do-i-have-personal-growth#Do I have personal growth?":"","exploit-the-virtues-and-reflect-on-the-improvements-both-are-equally-important#Exploit the virtues and reflect on the improvements, both are equally important":"","how-it-impacts-your-anxiety-and-that-of-the-team-to-manage-it#How it impacts your anxiety and that of the team to manage it":"","the-obvious-not-everything-has-to-go-through-you-nor-do-you-have-to-be-aware-of-everything#The obvious, not everything has to go through you, nor do you have to be aware of everything":"","the-quest-for-quick-feedback-to-feel-valuable#The quest for quick feedback to feel valuable":""},"title":"We should all manage teams"},"/blog/posts/when-the-context-matter/":{"data":{"":"The following publication could be said to be a continuation of another one where we talk about how having lightweight images helps us in many aspects, if you still could not read it here I leave you the access.\nToday we are going to make a small, but important improvement, and we are going to find out why we are doing it.","preface#Preface":"As the last proposal in the post I shared earlier we stayed at this point:\n# First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN GOOS=linux go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\"/myapp\"] If we have as a premise that container technology and its popularization with Docker is disruptive is largely because of the benefits of being able to build in different places and not find surprises when we start the application that is contained in the container, I invite you to think for a few seconds / minutes or as long as we need.\nCan an image enhancement be made for the Golang application?\nThe answer is yes, let‚Äôs get to work!","proposallearning#Proposal/learning":"Golang has one feature that is really powerful, and I‚Äôm not talking about goroutines, and that is the great virtue of being able to cross-compile.\nWhat is cross-compilation?, it is the feature of being able to compile from a host with a certain architecture and operating system (OS) the binary for another architecture or OS.\nSo to be a little more specific we can from a host with OS = linux and architecture = amd64, compile a binary for OS = windows, architecture = 386 üò≤.\nLet‚Äôs imagine now that where we run the containers for our applications the computation is linux as OS and with amd64 architecture.\nWith this in mind let‚Äôs make a small but important improvement to our Dockerfile.\n# First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify ENV GO111MODULE=on \\ CGO_ENABLED=0 \\ GOOS=linux \\ GOARCH=amd64 COPY . ./ RUN go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\"/myapp\"] Let‚Äôs first analyze the change and why we are making it.\nENV GO111MODULE=on \\ CGO_ENABLED=0 \\ GOOS=linux \\ GOARCH=amd64 CGO_ENABLED=0 we deactivate CGO\nGOARCH=amd64 we indicate the architecture\nGOOS=linux we indicate the SO\nAll good luispi, but what gain did we get?\nMaking sure to compile the application for the environment in which it will be executed will prevent several headaches or troubleshooting, and needless to say that we no longer care where we are going to do it (whatever our continuous integration channel), because by compiling, again, for the environment in which it will be executed, we can rest assured that we are shortening the margin of mishaps.\nSo as not to bore you and for the moment let‚Äôs take a break.\n¬°Have a good time! üëãüèΩ"},"title":"When context matters"}}