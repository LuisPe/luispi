{"/blog/es/about/":{"data":{"":"En el blog vas a encontrarte con reflexiones y aprendizajes sobre mi vida en general.\nNo pretendo ser ejemplo de nada ni nadie, las opiniones que dejo ac√° son m√≠as, espero no ofender a nadie con ellas.\nMi nombre es Luis Pedro ‚Äìluispe‚Äì tengo 38 a√±os al momento de escribir esta publicaci√≥n nac√≠ y crec√≠ en Gonnet, una localidad de La Plata, BsAs, Argentina. De mi infancia conservo a una tonelada de amigos con los cuales ya compartimos 35 a√±os, ahora que lo escribo es una locura. Son mi gu√≠a y mi cable a tierra, si soy lo que soy es en parte gracias a ellos y a mi familia ‚ù§Ô∏è\nDesde muy peque√±o jugu√© al f√∫tbol en el club Gimnasia y Esgrima de La Plata, despu√©s de muchos a√±os cuando estaba en la 7ma divisi√≥n tuve que tomar la decisi√≥n de si el f√∫tbol iba a ser mi destino profesional o un deporte, la decisi√≥n fue que sea un deporte, este cap√≠tulo se merece una publicaci√≥n aparte.\nAl terminar la secundaria en La Plata estudi√© y me recib√≠ en el conservatorio Gilardo Gilardi y a la par tambi√©n me recib√≠ en un terciario de jazz (EMU).\nDespu√©s de varios discos, recitales y ensayos decid√≠ dar un giro a mi vida y comenc√© a estudiar en la UTN (FRLP) la carrera de ingenier√≠a en sistemas.\nEn 2012 comenc√© a trabajar en tecnolog√≠a y gracias a ella me hice de varios amigos que a√∫n y por fortuna conservo, no voy a nombrarlos porque temo olvidarme de m√°s de una o de uno.\nLuego de varios a√±os y ahora que lo escribo 38 y contando, es un buen momento para escribir, lo considero un buen canal para canalizar mis sensaciones que se suma a un buen vino, la m√∫sica mi familia y amigos.\nEntonces, ac√° va‚Ä¶ ¬°espero que lo disfrutes!"},"title":"Hola üëãüèº"},"/blog/es/posts/career/":{"data":{"":"Los aniversarios, puede ser un cumplea√±os, fin a√±o o cualquiera sea, en general lo llevan a uno llevan a reflexionar.\nEste caso no ser√≠a la excepci√≥n, ¬øcu√°l es el aniversario?, hace menos de un mes cumpl√≠ un a√±o en mi actual empresa (Pomelo), el 29 de agosto del 2022 hicieron p√∫blicas las promociones en la empresa, formo parte de las personas a las que ascendieron, quer√≠a escribir algunas conclusiones que me llevo de estos m√°s 365 d√≠as, dos equipos y un ascenso.","pilares#Pilares":"Los que me conocen, sea en lo laboral o la vida personal, me escuchan hablar sobre tres principios, con los que trato de movilizarme y busco a mi alrededor:\nConfianza Humildad Respeto Confianza Voy a intentar explicar que significa para m√≠ este pilar.\nEn una de mis primeras publicaciones donde hablo sobre errores y aprendizajes, hablo sobre que ascender no deber√≠a ser la √∫nica o principal meta hay cosas much√≠simo, pero much√≠simo m√°s importantes y la confianza es una de ellas.\nOk luispi, ¬øpero qu√© tiene que ver con la confianza?, alla vamos.\nInicios Mi primer acercamiento a Pomelo fu√© por medio de Maru, ya nos conoc√≠amos, Maru fu√© quien hizo el proceso de hiring cuando entr√© en MercadoLibre, luego estuvimos cerca de reencontrarnos en Naranja X, pero bien sirvi√≥ el impasse para reencontrarnos profesionalmente en Pomelo, esto lo cuento justamente por el t√©rmino de confianza.\n¬øCreen que Maru hubiese confiado en m√≠ no solo una, sino dos veces?, yo creo que no, es una persona absolutamente admirable en construir equipos de tecnolog√≠a, y esa confianza que mutuamente nos tenemos hace que:\nMaru vuelva a confiar en m√≠ una y otra vez y vuelva a convocarme. De mi lado tomar esa confianza depositada y construir (o intentar hacerlo) el mejor contexto de trabajo posible. Reencuentro y desencuentro En los m√°s 365 d√≠as que llevo en Pomelo trabaje casi la mitad de tiempo en el equipo del Procesador, me reencontr√© con caras conocidas y conoc√≠ algunas nuevas, ya voy a nombrarlas, primero la an√©cdota.\nEn el Procesador estuve poco m√°s de 5 meses, cumplimos el hito (locura) de tener en marcha el procesador y luego mediando enero de 2022 me mude al equipo de infra. Ac√° se jugaron dos pilares, confianza y respeto, ¬øpor qu√© digo esto?, los chicos supieron para donde quer√≠a dirigir mi carrera y me apoyaron al 100%.\nNo obstante 7 meses despu√©s me demostraron que son personas en las cuales voy a confiar infinitamente m√°s all√° de Pomelo, estas personas son: Brizi, Dami y Nico, no voy a contar los pormenores ellos saben a qu√© me refiero, pero quer√≠a agradecerles p√∫blicamente ‚ù§Ô∏è.\nCon ustedes, a la guerra con un escarbadientes Habl√© de mi primera etapa en Pomelo, pasemos a la segunda, ‚ÄúMigraci√≥n al equipo de Infraestructura‚Äù.\nDe enero a esta parte y desde el minuto cero Juanjo y Gus y conoci√©ndome, dir√≠a que nada, me dieron el espacio para crear un espacio de debate y repreguntas. Escucharon mis propuestas, las hicieron suyas, y entre todos las llevamos adelante, me hicieron partes de las suyas las tome como propias y as√≠ rodeado de una pila de personas con una calidad humana de otro planeta hicimos y estamos haciendo cosas incre√≠bles.\n¬øCu√°l es el punto de todo esto?, que ascender no sea la principal o √∫nica meta, generar confianza a tu alrededor es incontable de veces m√°s importante y es, al menos en los valores que persigo y busco, infinitamente superior a cualquier puesto que ocupemos u obtengamos.\nPor ahora no quiero aburrir ni extenderme, pronto voy a escribir sobre los otros dos pilares que siento indispensables para transitar la vida, humildad y respeto."},"title":"Aniversarios"},"/blog/es/posts/hexagonal-architecture/":{"data":{"":"Esta es la primera de una serie donde vamos a revisar diferentes patrones de desarrollo que errores comet√≠ y cu√°l es en la actualidad y lo que entiendo hasta el momento, la mejor forma de aplicarlo.\nComo bien dice el t√≠tulo de la publicaci√≥n hoy quiero hablar sobre arquitectura hexagonal.","comencemos#Comencemos":" Anti patr√≥n\nAnotaci√≥n en nuestro modelo de dominio e.g json\nUn error que sol√≠a cometer es tener las anotaciones json o gorm o cualquier anotaci√≥n en el modelo de dominio.\nImaginemos que tenemos nuestro modelo /user/user.go con el siguiente contenido\ntype User struct { FirstName string `json:\"first_name\"` LastName string `json:\"last_name\"` } Antes de continuar leyendo te invito a que por unos segundos/minutos hagamos una reflexi√≥n de porque es un anti patr√≥n.","pre√°mbulo#Pre√°mbulo":"Hace tiempo noto mucho ‚Äúhype‚Äù en torno a la arquitectura hexagonal y me gustar√≠a ser claro al respecto, no estoy en contra, mas bien todo lo contrario, me parece un excelente patr√≥n.\nPero creo que caemos en el error de aplicar la recetas de publicaciones de ‚Äúmedium‚Äù y no solo terminamos con todas las capas de nuestro sistema acopladas sino que con nombres de packages al estilo ‚Äúadapters‚Äù o ‚Äúports‚Äù y si hay algo hermoso en el lenguaje de Go(lang) es la intencionalidad en el nombre de un package.\nüóíÔ∏è Un buen nombre en el package hace que no sea necesario nada m√°s para expresar la intencionalidad del mismo. Te comparto y recomiendo leer la siguiente publicaci√≥n oficial, opini√≥n personal, aplica para cualquier lenguaje.","propuestaaprendizaje#Propuesta/aprendizaje":"Nuestro modelo deber√≠a ser agn√≥stico a la capa de presentaci√≥n y a la de datos, por lo tanto, no deber√≠a contener ninguna anotaci√≥n. Deber√≠amos mapear los datos hacia nuestro modelo y viceversa, a continuaci√≥n un ejemplo de como quedar√≠a un controlador rest HTTP e.g.:\nuser/rest_controller.go\ntype UserDTO struct { FirstName string `json:\"first_name\"` LastName string `json:\"last_name\"` } func (ctrl *controller) toUserModel(userDTO *UserDTO) *User { return \u0026User{ FirstName:\tuserDTO.FirstName, LastName:\tuserDTO.LastName, } } func (ctrl *controller) toUserDTO(user *User) *UserDTO { return \u0026UserDTO{ FirstName:\tuser.FirstName, LastName:\tuser.LastName, } } Como podemos ver en el ejemplo anterior los m√©todos privados en el controlador rest mapean desde el data transfer object hacia el modelo de dominio cuando llamemos al servicio y viceversa.\nPor √∫ltimo quitamos las anotaciones en nuestro modelo user/user.go\ntype User struct { FirstName string LastName string } Todo bien luispi, ¬øpero qu√© ganancia obtuvimos?\nAhora nuestro /user/user.go al no tener ninguna anotaci√≥n no importa como presentemos o como obtengamos/persistamos los datos, nunca vamos a tocar el core/dominio de nuestra aplicaci√≥n, ahora si podr√≠amos afirmar que nuestro core/dominio es agn√≥stico a las capas de presentaci√≥n o datos ganando flexibilidad, testabilidad, etc.\nPara no aburrirte y por el momento hagamos una pausa.\nPr√≥ximamente vamos a seguir con peque√±as publicaciones donde vamos a intentar repensar otros anti patrones.\n¬°Que pase bien!"},"title":"Hexagonal Architecture"},"/blog/es/posts/interfaces-correct-use/":{"data":{"":"En la siguiente publicaci√≥n quiero compartir un error com√∫n que sol√≠a cometer en mis proyectos en Golang. Y como bien dice el t√≠tulo y descripci√≥n hoy vamos a hablar de las interfaces.\nSeguramente se encuentren con algunas referencias a otra publicaci√≥n que hice sobre arquitectura hexagonal, creo que parte del mal uso de las interfaces es la consecuencia de seguir a rajatabla publicaciones de ‚Äúmedium‚Äù y no tomarse el tiempo para entender el concepto subyacente.","conclusiones#Conclusiones":"Con estos cambios sutiles pero poderosos nuestros producer ahora tienen una enorme flexibilidad.\nPor √∫ltimo quiero agradecer a mi amigo y mentor morenojp que me comparti√≥ este anti patr√≥n y me hizo repensar y mejorar, una vez m√°s, en esto del desarrollo de software.\nPara no aburrirte y por el momento hagamos una pausa.\nPr√≥ximamente vamos a seguir con peque√±as publicaciones donde vamos a intentar repensar otros anti patrones.\n¬°Hasta pronto! üëãüèΩ\nFuentes:\nwiki oficial de Golang go interfaces misuse ","pre√°mbulo#Pre√°mbulo":"Si hay algo que tenemos que admitir en el ecosistema de Golang es el enrosque que a veces nos damos con algunas/varias cuestiones. Por dar un ejemplo en como nombrar las variables (que es un tema del que quiero hablar pronto) y en el caso de hoy con las interfaces.\nGolang tiene sus particularidades, pero se basa en muchos patrones ya conocidos en la industria. En el ecosistema de Go a veces complejizamos algunos patrones y caemos en ‚Äúanti patrones‚Äù, en la siguiente publicaci√≥n vamos a revisar un proyecto falso y refactorizarlo para hacer un buen uso de las interfaces.\nPara simplificar un poco la publicaci√≥n vamos a acotar el caso de uso y lo reduciremos a la capa de servicio y repositorio.\nImaginemos que en la capa de repositorio nos encontramos con lo siguiente:\npackage repository import ( // pkg imports ) type Repository interface { Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) } type repository struct { // repository client and configs go here } func NewRepository() Repository { return \u0026repository{} } func (repo *repository) Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) { // previous logic here return repo.toModel(beerEntity), nil } Y en la capa de servicio lo siguiente:\npackage service import ( // pkg imports ) type Service interface { Create(ctx context.Context, model *Beer) (*Beer, error) } type service struct { repo Repository } func NewService(repo Repository) Service { return \u0026service{repo: repo} } func (svc *service) Create(ctx context.Context, model *Beer) (*Beer, error) { beer, err := svc.repo.Save(ctx, model) if err != nil { return nil, err } return beer, err } El anterior escenario es el que me encuentro com√∫nmente en los proyectos de Go y quiero comentarles que yo tambi√©n supe cometer el mismo error.\nTodo bien luispi, ¬øpero cu√°l es el error?\nLas interfaces en Go generalmente pertenecen al paquete que usa valores del tipo de interfaz, no al paquete que implementa esos valores. ü´†","propuestaaprendizaje#Propuesta/aprendizaje":" El paquete de implementaci√≥n debe devolver tipos concretos (generalmente puntero o estructura): de esa manera, se pueden agregar nuevos m√©todos a las implementaciones sin requerir una refactorizaci√≥n extensa.\nCon esto en mente vayamos a los bifes\nEn primer lugar, ataquemos la capa de repositorio, como bien dice la nota anterior vamos a retornar una estructura y no la interfaz.\npackage repository import ( // pkg imports ) type Repository struct{ // repository client and configs go here } func NewRepository() Repository { return Repository{} } func (repo *Repository) Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) { // previous logic here return repo.toModel(beerEntity), nil } Repasemos el cambio.\nEn primer lugar, eliminamos la interfaz y ahora la funci√≥n NewRepository() retorna la estructura Repository, y en segundo lugar agregamos a Repository el m√©todo save.\nTodo bien luispi, ¬øpero qu√© ganamos con este cambio?\nComo no tenemos que cumplir con ning√∫n contrato de interfaz no estamos atados a tener que implementar todos los m√©todos que tenga la misma.\nTenemos que pensar a este paquete como un productor (producer) y siempre tengamos como nota mental que los producer, de nuevo, retornan tipos concretos (generalmente un puntero o una estructura).\nAhora es el turno de editar la capa del consumidor (consumer), en este caso el service.\npackage service import ( // pkg imports ) type Repository interface { Save(ctx context.Context, beer *Beer) (*Beer, error) } type Service struct { repo Repository } func NewService(repo Repository) Service { return Service{repo: repo} } func (svc *Service) Create(ctx context.Context, beer *Beer) (*Beer, error) { createBeer, err := svc.repo.Save(ctx, beer) if err != nil { return nil, err } return createBeer, err } Repasemos el cambio.\nRealizamos varios cambios, en primer lugar declaramos la interfaz Repository y en la estructura Service inyectamos la interfaz para que pueda consumirse en los m√©todos del servicio.\nAl igual que con la capa de repositorio nuestro NewService() ahora retorna una estructura y no una interfaz.\nPor ultimo agregamos el m√©todo Create a nuestro Service."},"title":"Interfaces y \"copy paste\""},"/blog/es/posts/lightweight-container-image/":{"data":{"":"En la siguiente publicaci√≥n voy a compartirles algunos consejos y buenas pr√°cticas para desarrollar nuestras im√°genes\nde container, como ejemplo vamos a crear una imagen para una app en Golang, pero los siguientes consejos aplican\npara cualquier lenguaje, ¬°vamos!","comencemos#Comencemos":"Imaginemos que tenemos el siguiente Dockerfile para crear nuestra imagen de container e.g:\nDockerfile 1 2 3 4 5 6 7 8 9 10 FROM golang:1.18 WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main ENTRYPOINT [\"/myapp\"] Construyamos nuestra imagen docker build -t myapp:0.0.1 .\nSi listamos las im√°genes que tengamos en nuestro host vamos a poder observar que el peso es de aproximadamente 968 MB\nWhat? 968 MB solo para disponibilizar un binario que pesa unos pocos megas?\nNOTA\nEn todas mis publicaciones vas a encontrarte con conceptos, la idea es que aprendamos y no copiemos y peguemos. Por dar un ejemplo RUN go build -o ./myapp ./path/to/main donde ./path/to/main deber√≠a estar el main de tu app de Golang","pre√°mbulo#Pre√°mbulo":"Perseguir que nuestras im√°genes de container sean lo m√°s reducida posible en cuanto a su peso (megabytes, gigabytes, etc.) no es una cuesti√≥n de gustos, nos ayuda en muchos aspectos, a continuaci√≥n les comparto algunos:\nReduce gastos de storage en el registry que utilizamos para gestionar nuestras im√°genes. Cuando tengamos que obtener la imagen para iniciar el container queda claro que mientras m√°s liviana sea m√°s r√°pido va a ser la inicializaci√≥n del container, y con esto ganamos en dos puntos. Costos, y con costos nos referimos al uso del networking que utilicemos para obtener la imagen y luego inicializar el container. Velocidad en auto scaling, est√° claro que obtener una imagen de 20 MB versus una de 900 MB la primera, claro est√°, va a inicializarse con mayor velocidad. Por dar algunos ejemplos.","propuestaaprendizaje#Propuesta/aprendizaje":"Vamos con la primera propuesta. Siempre es una buena pr√°ctica usar im√°genes -alpine, por convenci√≥n en el universo de container cuando disponibilizamos una imagen -alpine estamos indicando al cliente que es una imagen reducida en tama√±o y la que deber√≠amos utilizar en nuestro Dockerfile, entre otras cosas.\nBien, realicemos un peque√±o cambio en nuestro Dockerfile y volvamos a construir nuestra imagen\nDockerfile 1 2 3 4 5 6 7 8 9 FROM golang:1.18-alpine3.16 WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main ENTRYPOINT [\"/myapp\"] Si prestamos atenci√≥n el cambio fue sutil, pero efectivo, pasamos de FROM golang:1.18 a FROM golang:1.18-alpine3.16\nConstruyamos nuevamente nuestra imagen docker build -t myapp:0.0.2 .\nSi volvemos a listar las im√°genes nos vamos a encontrar con que ahora la imagen myapp:0.0.2 pesa aproximadamente 331 MB\nReducimos, si las cuentas no fallan, 637 MB.\nEs una excelente ‚Äúapproach‚Äù pero repensemos. ¬øHace falta tener una imagen con todo Golang dentro del container pesando cerca de 331 MB para disponibilizar un binario que pesa unos cuantos megabytes?.\nLa respuesta es claramente, no.\nSegunda propuesta La tecnolog√≠a de container tiene una caracter√≠stica excelente, que para nuestro caso, nos va a ayudar a construir una imagen de container muy liviana, por si no lo sab√≠as, estoy hablando de Multistage, te comparto la documentaci√≥n oficial para que profundices sobre esta caracter√≠stica.\n¬øEn qu√© consiste Multistage?, se trata de construir im√°genes por etapas pudiendo as√≠ compartir datos entre cada una de ellas y vamos a obtener una imagen final de un tama√±o muy peque√±o.\nLo primero que vamos a hacer es tener una primera etapa de build, donde vamos a construir el binario, y una segunda etapa donde vamos a dejarlo disponible para utilizarlo.\nManos a la obra, abramos y realicemos las siguientes modificaciones a nuestro Dockerfile.\nDockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\"/myapp\"] Como podemos observar la primera modificaci√≥n consiste en taguear la primera etapa como build. Luego en la segunda y etapa final con la siguiente l√≠nea COPY --from=builder /build/myapp /myapp copiamos el binario desde la etapa que tagueamos como builder y lo disponibilizamos en una imagen alpine.\nSi listamos ahora nuestras im√°genes podemos observar que pesa aproximadamente 9 MB, si si, escribi correctamente 9 megabytes üòé.\nPodr√≠amos realizar una √∫ltima optimizaci√≥n o buena pr√°ctica, pero creo que vale la pena dejarlo para otra publicaci√≥n.\nPara no aburrirte y por el momento hagamos una pausa.\n¬°Que pase bien! üëãüèΩ"},"title":"El tama√±o importa"},"/blog/es/posts/mistakes-and-learnings/":{"data":{"":"En nuestra sociedad en general y en tecnolog√≠a en particular tenemos la extra√±a costumbre de publicar los aciertos (opini√≥n de quien redacta, mal llamado caso de √©xito) y pocas, por no decir nulas, las ocasiones donde se comparten los errores (opini√≥n de quien redacta, mal llamado fracaso).\nComo estar√°s sospechando a continuaci√≥n voy a compartir algunos errores, que aprend√≠ de ellos y m√°s a√∫n cuanto crec√≠ y entend√≠ de la industria al compartirlos.","ense√±anza-1#Ense√±anza 1:":" Escribir un paso a paso, compartirlo, validarlo y re-validarlo antes de ejecutar nada\nMi primer desarrollo productivo fue en 2012 (?) aproximadamente, se trat√≥ de una web para una empresa que necesitaba publicar su cat√°logo de productos, enumero tecnolog√≠as para tener un poco de contexto:\ndigitalocean, reci√©n salido, adem√°s de los droplets no se cuantos productos m√°s ten√≠a en cartera angular js (angular 1) creo que nodeJS para el backend Este desarrollo lo hice con quien es una de las personas que m√°s respeto y admiro, V√≠ctor De Grandis ‚ÄìVitor‚Äì.\nMi experiencia configurando servidores era nula, tuve la delirante idea de decirle a Vitor:\nche amigo, ¬øpuedo configurar el servidor y despu√©s intentas romperlo?\nActo seguido me pongo a realizar varias configuraciones entre ellas me puse a jugar con los puertos, hasta que muy orgulloso le digo:\nVitor, prob√° a ver qu√© onda\nDespu√©s de un rato me llega un mensaje,\namigo ¬øpuede ser que cerraste el puerto 22?\nHermoso, sal√≠ de la casa, cerr√© la puerta y tir√© la llave a una laguna.\nComo la gente de digitalocean est√° preparada para personas como quien redacta, tiene una funcionalidad que si se accede desde la web (no tengo mucha idea como se resuelve por detr√°s) podes ejecutar una terminal en el navegador y acceder al droplet.\nConfigure de nuevo los puertos, y el resto medio que es historia.","ense√±anza-2#Ense√±anza 2:":" Documentar el conocimiento por m√°s trivial que lo consideremos e invitemos a que el resto lo haga. Adem√°s de evitar varias reuniones de ‚Äútransferencia de conocimiento‚Äù nos vamos a ahorrar varios arrobas, ¬øte recuerda algo?\n@fulanito puede darte una mano\nEn otro equipo que tuve la fortuna de trabajar, peque√±o en cantidad de personas, pero de las cuales aprend√≠ mucho mucho de cada una de ellas, lamentablemente la aventura fue muy corta en tiempo.\nLo que s√≠ me extra√±√≥ a medida que uno a uno se iba yendo gente del equipo es que perd√≠amos mucho conocimiento a punto tal de parar motores (literal) y estar semanas sin entregar funcionalidades a producci√≥n porque tuvimos que sentarnos a entender c√≥mo dejar esa l√≠nea de c√≥digo local y exponerla a internet.\n¬øQu√© errores detecte y que aprend√≠?\nDocumentar el conocimiento, por m√°s trivial que lo consideremos, documentarlo.\nO acaso, y te invito a pensar durante unos segundos. ¬øte encontraste una o m√°s veces haciendo reuniones de ‚Äúknowledge transfer‚Äù porque alguna persona estaba dejando el equipo?\n¬øO acaso eras vos quien lo estaba dejando?","ense√±anza-3#Ense√±anza 3:":" Ascender no deber√≠a ser la √∫nica o principal meta, compartir y adquirir conocimiento deber√≠a ser la gu√≠a.\nEnse√±anza 3 bis:\nPensar y realizar pruebas antes de implementar cualquier cosa es una gu√≠a fundamental para entender el comportamiento de nuestros sistemas o del conocimiento del dominio que tenemos hasta el momento. Siempre y repitamos, siempre, es una ganancia en el tiempo.\nPor √∫ltimo y en otro lugar que trabaj√©, conoc√≠ a una de las personas que mejor resuelve problemas, Juan Moreno, ¬øqu√© es mejor para m√≠?, soluciones simples a problemas complejos.\nDespu√©s de este peque√±o par√©ntesis y dedicatoria a quien hoy es una de mis fuentes de consulta, referente y mentor, voy a intentar explicar la ense√±anza n√∫mero 3 y 3 bis.\nEn los tiempos prepandemia, sol√≠a ‚Äìcostumbre que a√∫n conservo desde lo remoto‚Äì arrancar temprano, tener un par de horas ‚Äúa solas‚Äù me permite focalizar y priorizar en la medida de lo posible las cosas que quiero y me compromet√≠ a realizar.\nUna de esas ma√±anas y en consecuencia a una funcionalidad que est√°bamos desarrollando en el equipo el l√≠der lleg√≥ un poco enojado (por ser amable) y agarr√≥ a los primeros que encontr√≥ del equipo, y as√≠ descargar su enojo porque hab√≠a ‚Äúquedado mal‚Äù ante sus superiores porque de todas las casu√≠sticas hab√≠a un caso que romp√≠a.\nFamoso Take a breath y al cabo de unos minutos me junt√© con √©l a solas, le hice una pregunta:\n¬øCu√°ntas personas est√°n involucradas en esta funcionalidad?\nEntendi√≥ con la pregunta que deb√≠a haber esperado y comentarle a todo el equipo responsable lo que hab√≠a pasado y no agarrar a los primeros que se cruz√≥ en el camino.\nPor √∫ltimo le dije que comprend√≠a, pero no compart√≠a su enojo ni como lo hab√≠a manejado.\nQuiero aclarar que mi intenci√≥n no es juzgar, sino compartir que aprend√≠ de ese error, de nuevo:\nAscender no deber√≠a ser la √∫nica o principal meta, se corre el riesgo de estar bajo una enorme presi√≥n por no estar a la altura de las circunstancias. Compartir y adquirir conocimiento deber√≠a ser la gu√≠a.\nPensar y realizar test antes de implementar cualquier cosa es la gu√≠a fundamental para entender el comportamiento de nuestros sistemas o del conocimiento del dominio que tenemos hasta el momento. Siempre y repitamos, siempre, es una ganancia en el tiempo.\nPara finalizar entiendo que voy a seguir cometiendo errores y compartiendo la experiencia que me dejaron, eso no me hace ni peor ni mejor que nadie.\nEstoy convencido que es una sana manera de transitar la vida donde lo ‚Äúnormal‚Äù es mostrarnos ‚Äúexitosos‚Äù o como me gusta hacer paralelismos con el f√∫tbol, ‚Äújugar para la tribuna‚Äù, pero a fin de cuenta es solo una apariencia.\n¬°Gracias por leerme! üëãüèΩ"},"title":"De los errores se aprende, si se comparten, se crece"},"/blog/es/posts/technical-debt/":{"data":{"":"En la siguiente publicaci√≥n vamos a repensar un concepto com√∫nmente encontrado y avalado en la industria de la\ntecnolog√≠a, la deuda t√©cnica.","conclusiones#Conclusiones":"La deuda t√©cnica es muy agotadora para los equipos y donde hoy pensamos que estamos ganando tiempo te aseguro que pronto, muy pronto, se pierde agilidad y velocidad en el desarrollo.\nSe puede evitar en la mayor√≠a de los casos y no la aceptemos como algo natural.\nPara finalizar espero que repensemos juntos la ‚Äúdeuda t√©cnica‚Äù y que nos incomode tenerla.\n¬°Gracias por leerme! üëãüèΩ","distinta-vara#Distinta vara":"Imaginemos que necesitamos pintar el exterior de nuestra casa y decidimos contratar a un profesional para que realice el trabajo.\nDespu√©s de consultar por varios presupuestos decidimos contratar los servicios de ‚Äúx‚Äù para que se encargue del trabajo.\nAl cabo de unos dias ‚Äúx‚Äù nos comenta:\n- El trabajo est√° terminado.\nNos paramos en el frente de la casa y notamos que alrededor de los marcos de la ventana no est√° pintado en algunos casos.\nAl notar esto le preguntamos a ‚Äúx‚Äù porque no pinto alrededor de los marcos de la ventana, a lo que nos responde:\n- Disculp√°, deuda t√©cnica que la podemos atacar a futuro.\n¬øQu√© sentir√≠as si te encontr√°s con una situaci√≥n asi?\n¬øPor qu√© en el contexto de la tecnolog√≠a avalamos tener deuda t√©cnica?","repensemos#Repensemos":"En tecnolog√≠a es muy com√∫n encontrarnos con este escenario y lamentablemente lo naturalizamos y como comente en otra publicaci√≥n donde hablo entre otras cosas sobre la importancia de documentar y hacer test, es algo com√∫n que siempre veo como ‚Äúdeuda t√©cnica‚Äù, repensando en el ejemplo de pintar la casa creo que nos expone como podemos tener ‚Äúdistinta vara‚Äù para medir la misma situaci√≥n en diferentes contextos.\n¬øPor qu√© es nociva la deuda t√©cnica?\nEn contexto de tests: es extremadamente dif√≠cil realizar cambios sin que explote todo. En contexto de documentaci√≥n: es extremadamente dif√≠cil agregar funcionalidad porque la falta de documentaci√≥n hace que perdamos una cantidad enorme de tiempo tratando de entender como est√°n construidas las cosas. En contexto de equipo: tener deuda t√©cnica hace que el conocimiento quede en las personas y deber√≠amos siempre, siempre, impulsar que el conocimiento est√© distribuido. "},"title":"Deuda t√©cnica"},"/blog/es/posts/ticket-hell/":{"data":{"":"","posicionamiento#Posicionamiento":"¬øCu√°l es el racional detr√°s de esta posici√≥n firme?\nSe tiene que tener una cultura extremadamente fuerte de punta a punta para poder determinar que ticket es mas importante que otro. El equipo de infraestructura inherentemente tiene que crecer si el equipo de tecnolog√≠a y producto se expande a nuevas funcionalidades. Es extremadamente dif√≠cil mantener al equipo de infraestructura motivado. Es imposible innovar desde el equipo de infraestructura. Existen varios motivos m√°s, pero en este momento me parecen los mas destacables y avanzo en explicar cada uno de ellos.\n1. Cultura extremadamente fuerte Tanto a los equipos de infraestructura como a los de QA no se los suele involucrar en el armado de roadmap y sprint de tecnolog√≠a y producto. En caso de que pase, se lo hace al final de la milla ‚Äúcuando ya todo est√° cocinado‚Äù.\n¬øA d√≥nde apunto con esto?, que si al responsable de infraestructura le llegan dos tickets y tiene que priorizar por cuestiones de capacidad de ejecuci√≥n, la pregunta obvia:\n¬øque ticket priorizo?\nBuena suerte cuando est√©s ah√≠, porque para los clientes lo de ellos es lo m√°s importante del mundo mundial y es lo m√°s importante por sobre cualquier cosa.\n2. Crecimiento sin sentido Supongamos que el punto anterior esta resuelto, de este punto que voy a explicar a continuaci√≥n no se zafa.\n¬øPor qu√© decimos que el equipo de infraestructura inherentemente tiene que crecer?\nSi caemos en tickets que solo resuelve el equipo de infraestructura a m√°s productos y funcionalidades que tenga la empresa m√°s personas se necesitan del equipo de infraestructura para atacar la demanda de tickets.\nFelicitaciones, creaste un embudo de ejecuci√≥n.\n¬øSoluci√≥n?, contratar m√°s talento para el equipo de infraestructura.\n3. Motivaci√≥n Supongamos que el punto 1 y el 2 est√°n resueltos.\n¬øLos integrantes del equipo de infraestructura son humanos verdad?\nDigo esto porque es dif√≠cil mantener la motivaci√≥n si ‚Äîen un trabajo que es altamente impulsado por la creatividad‚Äî acotamos a los integrantes del equipo a ‚Äúcerrar tickets‚Äù sin ning√∫n lugar para la discusi√≥n o la doble pregunta.\n¬øQu√© puede pasar?, rotaci√≥n alta en el equipo de infra y un malestar en los equipos de tecnolog√≠a que, si son t√≥xicos, pueden acusar de bloqueantes o mala experiencia en la gesti√≥n de infraestructura al equipo de infra.\nDe esto √∫ltimo ¬øqu√© puede decirte?, Keep Calm y te dejo un gran abrazo.\n4. Innovaci√≥n Por √∫ltimo si tenemos resueltos los anteriores 3 puntos es imposible innovar, lisa y llanamente.\n¬øPor qu√©?, un equipo que trabaja simplemente cerrando tickets, abocado solo a participar en un proyecto creando infraestructura, es imposible que pueda innovar.","problema#Problema":"Problema Si solo ten√©s un martillo todos los problemas se parecen a un clavo\n¬øPor qu√© comienzo con esta conocida frase?, primero quiero dar un poco de historia y luego voy a explicar por qu√© la menciono.\nEn los equipos de infraestructura en el cual llevo trabajando y liderando algunos a√±os tuve la gran fortuna de cruzarme con Juanjo. Desde el minuto cero le escuch√© decir, promover y defender a capa y espada:\n- Nunca caigamos en un equipo de infraestructura que trabaje mediante pedidos por tickets","volvamos-al-inicio#Volvamos al inicio":"Si solo ten√©s un martillo todos los problemas se parecen a un clavo\nA lo largo de post expliqu√© el racional y los puntos mas importantes en los que va a impactar una metodolog√≠a de tickets para gesti√≥n de infraestructura.\nY quiero dejar en claro que no est√° mal trabajar por tickets en un equipo de infraestructura, lo que si est√° definitivamente mal es que la gesti√≥n de infraestructura se haga por tickets.\n¬øY qu√© tiene que ver la frase del martillo?, que se implement√≥ mal una metodolog√≠a √°gil en muchas empresas con los equipos de infraestructura y ‚Äúdebemos parar la pelota‚Äù para reflexionar por qu√© no est√°n funcionando bien las cosas en muchos lugares.\n¬øY c√≥mo podemos evitarlo?\nDebemos inyectar una mentalidad de producto a los equipos de infraestructura, ofrecer abstracciones con experiencias de primer nivel del caos de la plataforma subyacente para que los equipos de tecnolog√≠a de producto sean autosuficientes en la gesti√≥n del software y la infraestructura asociada.\nEspero que mi experiencia te haga repensar como formar cultura y procesos de trabajo para los equipos de infraestructura en la empresa si ten√©s dudas o necesitas discutir algo de lo que escrib√≠ estoy encantado de conocerte :)\n¬°Hasta pronto! üëãüèΩ"},"title":"El infierno de los tickets"},"/blog/es/posts/we-should-allmanageteams/":{"data":{"":"Para tener un contexto por si llegaste de casualidad a esta publicaci√≥n,\nvoy a hablar desde la industria de tecnolog√≠a, industria profundamente t√©cnica,\ny c√≥mo liderar equipos, al menos por un lapso de tiempo,\npuede ayudar al equipo y a vos mismo, tanto de forma profesional como personal.","c√≥mo-impacta-en-tu-ansiedad-y-la-del-equipo-gestionarlo#C√≥mo impacta en tu ansiedad y la del equipo gestionarlo":"Que tema la ansiedad, soy de Argentina, pa√≠s con la mayor cantidad de psic√≥logos por habitante, no es un dato ni bueno ni malo, de hecho hace m√°s de diez a√±os hago terapia para repensarme y repensar a la sociedad.\nTraigo este dato por el tema de la ansiedad y merece un cap√≠tulo aparte, como las redes sociales intensificaron este fen√≥meno.\nPero volvamos al punto que quiero desarrollar, la ansiedad en la gesti√≥n de equipos.\nVivimos en una sociedad que est√° apurada por llegar donde desarrollamos aplicaciones que fomentan compartir videos de segundos porque no soportamos ver un video de m√°s de 30 segundos, donde compartir informaci√≥n se tiene que comprimir en 140 caracteres y si es un thread mas largo uf ni ganas de leerlo. Con este contexto de ansiedad gestionar y desarrollar equipos es un desaf√≠o enorme casi tit√°nico dir√≠a.\nRobado de una charla de Paenza charla completa\nNo debe haber ning√∫n otro a√±o en la vida de una persona en donde uno incorpore tanta informaci√≥n, aprenda tanto, cambie tanto de calidad de vida, como de 0 a 1 a√±o\n¬øA qu√© voy con este punto?\nQue los aportes que uno vaya haciendo en el equipo y las personas son lentos muuuuy lentos, y en la mayor√≠a de los casos casi imperceptibles y mal que te pese vas a tener que aprender a manejar tu ansiedad y apoyar al equipo para que maneje la suya.\nOtro punto que me parece muy curioso es esa capacidad (y esto tambi√©n lo comenta el gran Paenza en la charla que te compart√≠ recientemente) de tener cero paciencia para enfrentar un problema, necesitamos respuestas para todo, y si, eso es en parte por la ansiedad que manejamos. Fomentemos la capacidad de resolver problemas no todo en la vida tiene una soluci√≥n ni hay respuestas para todo.\nFomentemos la capacidad de resolver problemas no todo en la vida tiene una soluci√≥n ni hay respuestas para todo.\nPor √∫ltimo, en muchas empresas es com√∫n encontrarse con procesos de ‚Äúperformance review‚Äù dos veces al a√±o y quiero dejar una pregunta en el aire.\n¬øRealmente creemos que una persona puede hacer una evoluci√≥n en un lapso de seis meses?\nY ac√° cobra mas sentido el fragmento de la charla de Paenza\nNo debe haber ning√∫n otro a√±o en la vida de una persona en donde uno incorpore tanta informaci√≥n, aprenda tanto, cambie tanto de calidad de vida, como de 0 a 1 a√±o","explota-las-virtudes-y-reflexiona-las-mejoras-ambas-son-igual-de-importantes#Explota las virtudes y reflexiona las mejoras, ambas son igual de importantes":"Voy a decir una obviedad, todos tenemos cosas buenas y malas.\nPor favor cuando tengas 1.1 habla de ambas cosas, explota y recalc√° las virtudes y reflexiona sobre las mejoras, si solo resaltas las mejoras ‚Äúo lo que hace mal‚Äù es angustiante para la persona que est√° del otro lado, va a sentir que nada alcanza y nada hace bien.\nPor el contrario, si solo resaltas las virtudes y no te tomas el tiempo para charlar sobre las mejoras no vas a impulsar el cambio y mejora en la vida y carrera de la persona.\nDe nuevo explota las virtudes y reflexiona las mejoras, ambas son igual de importantes.","la-b√∫squeda-de-feedback-r√°pido-para-sentirse-valioso#La b√∫squeda de feedback r√°pido para sentirse valioso":"Una de las cosas que me hubiese encantado que me aconsejen cuando comenc√© a gestionar y liderar equipos es buscar cosas que me den un retorno r√°pido de dopamina.\nCuando uno est√° liderando y gestionando equipos los procesos de cambio son muy lentos y uno tiende a pensar que es inservible y que no est√° haciendo ‚Äúnada productivo‚Äù, calma.\nNo me gustan los tips ni los trucos, pero algo que me sirvi√≥ y que me hubiese gustado que me aconsejen es buscar eso que te da felicidad, escribir un fragmento de c√≥digo o refactorizar, documentar, cualquier cosa, pero algo que te haga sentir que est√°s aportando valor al equipo, de nuevo, ya liderar y tomar decisiones aportan un valor brutal, la macana es que es imperceptible y uno es humano y necesita sentirse √∫til y valioso.","lo-obvio-no-todo-tiene-que-pasar-por-vos-ni-ten√©s-que-estar-al-tanto-de-todo#Lo obvio, no todo tiene que pasar por vos, ni ten√©s que estar al tanto de todo":"¬øCu√°ntas veces te cruzaste con ‚Äúl√≠deres t√≥xicos‚Äù?, ¬øQu√© es t√≥xico para m√≠?\nEsas personas que son embudo, todo tiene que pasar por ellas, todo el tiempo necesitan que las diferentes decisiones pasen por ellas y casi el 100% de las veces predominan sus decisiones.\n¬øQu√© nos propongo?\nImpulsemos y acompa√±emos el crecimiento de las personas del equipo y al equipo, compartamos conocimiento y estemos abiertos a nuevas y ideas y propuestas.\nPersonalmente hablando el d√≠a que me fu√≠ de vacaciones y todo sigui√≥ su rumbo, es m√°s sacamos funcionalidades, las comunicamos y al volver no se tiene esa sensaci√≥n de FOMO es la gloria.\nTe dejo la pregunta en el contexto de cuando volv√©s o alguien vuelve de vacaciones y en la daily se escucha.\nUff estuve revisando todos los emails y mensajes de slack para ponerme al d√≠a\n¬øNo deber√≠a seguir su curso natural los proyectos sin que est√©s vos presente?","se-vos-mismo-no-gestiones-desde-lo-libros#Se vos mismo, no gestiones desde lo libros":"Por √∫ltimo y tambi√©n puede ser una obviedad, pero se vos mismo, se siente a kil√≥metros de distancia cuando alguien te est√° hablando desde un discurso preparado o desde tips de un libro de liderazgo.\nTodos estamos y continuamos aprendiendo, vos tambi√©n.","tengo-un-crecimiento-personal#¬øTengo un crecimiento personal?":"¬øQu√© pasar√≠a si lideramos un equipo al menos por un a√±o?\nAunque no sea el path de carrera que elegiste, liderar y gestionar un equipo va a brindarte herramientas important√≠simas, m√°s importantes que cualquier patr√≥n de dise√±o y arquitectura de software.\nVas a aprender a controlar tus emociones, egos, frustraciones, vas a aprender a negociar, confiar, aconsejar, direccionar, pedir perd√≥n y mostrarte vulnerable, podr√≠a seguir por un rato largo, pero creo que me explico el nivel de informaci√≥n y herramientas que puede brindarte.\nLa respuesta es s√≠, vas a tener un crecimiento personal y claramente profesional."},"title":"Todos deber√≠amos gestionar equipos"},"/blog/es/posts/when-the-context-matter/":{"data":{"":"La siguiente publicaci√≥n se podr√≠a decir que es una continuaci√≥n de otra donde hablamos de como tener im√°genes livianas nos ayuda en muchos aspectos, si a√∫n no pudiste leerla ac√° te dejo el acceso.\nHoy vamos a realizar una peque√±a, pero importante mejora, y vamos a descubrir porque la estamos realizando.","pre√°mbulo#Pre√°mbulo":"Como √∫ltima propuesta en la publicaci√≥n que compart√≠ anteriormente nos quedamos en este punto:\nDockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify COPY . ./ RUN GOOS=linux go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\"/myapp\"] Si tenemos como premisa que la tecnolog√≠a de containers y su popularizaci√≥n con Docker es disruptiva es en gran medida por los beneficios de poder construir en diferentes lugares y no encontrarnos con sorpresas cuando iniciamos la aplicaci√≥n que est√° contenida en el container, te invito a que pensemos durante unos segundos/minutos o el tiempo que necesitemos.\n¬øSe puede realizar una mejora en la imagen para la aplicaci√≥n de Golang?\nLa respuesta es si, ¬°manos a la obra!","propuestaaprendizaje#Propuesta/aprendizaje":"Golang posee una caracter√≠stica que es realmente poderosa, y no estoy hablando de las goroutines, y es la gran virtud de poder realizar compilaci√≥n cruzada.\n¬øQu√© es compilaci√≥n cruzada?, es la caracter√≠stica de poder compilar desde un host con una determinada arquitectura y sistema operativo (SO) el binario para otra arquitectura o SO.\nEntonces para ser un poco m√°s espec√≠ficos podemos desde un host con SO = linux y arquitectura = amd64, compilar un binario para SO = windows, arquitectura = 386 üò≤.\nImaginemos ahora que donde corremos los contenedores para nuestras aplicaciones el c√≥mputo es linux como SO y con arquitectura amd64.\nCon esto en mente realicemos una peque√±a, pero importante mejora en nuestro Dockerfile.\nDockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026\u0026 go mod verify ENV GO111MODULE=on \\ CGO_ENABLED=0 \\ GOOS=linux \\ GOARCH=amd64 COPY . ./ RUN go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\"/myapp\"] Primero analicemos el cambio y porque lo realizamos.\nENV GO111MODULE=on \\ CGO_ENABLED=0 \\ GOOS=linux \\ GOARCH=amd64 CGO_ENABLED=0 desactivamos CGO\nGOARCH=amd64 indicamos la arquitectura\nGOOS=linux indicamos el SO\nTodo bien luispi, ¬øpero qu√© ganancia obtuvimos?\nAsegurarnos de compilar la aplicaci√≥n para el entorno en el que va a ser ejecutado nos va a prevenir varios dolores de cabeza o ‚Äútroubleshooting‚Äù, y de m√°s esta decir que ya no nos importa donde vamos a hacerlo (cualquiera sea nuestro canal de integraci√≥n continua), porque realizando la compilaci√≥n, de nuevo, para el entorno en que va a ser ejecutado, nos quedamos tranquilos de que estamos acortando el margen de contratiempos.\nPara no aburrirte y por el momento hagamos una pausa.\n¬°Que pase bien! üëãüèΩ"},"title":"Cuando el contexto importa"}}