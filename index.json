[{"content":"Anniversaries, be it a birthday, the end of the year or whatever, generally lead one to reflect.\nThis case would not be the exception, what is the anniversary, less than a month ago i completed one year in my current company (Pomelo), August 29, 2022 the promotions in the company were made public, I am part of the people who were promoted, I wanted to write some conclusions that I have drawn from these 365 days, two teams and a promotion.\nPillars Those who know me whether in my work or in my personal life, hear me talk about three principles with which I try to mobilize myself and i search around me:\nTrust Humility Respect Trust I will try to explain what this pillar means to me.\nIn one of my first publications where I talk about mistakes and learnings, I talk about the fact that moving up should not be the only or main goal, there are much, much more important things and confidence is one of them.\nOk luispi, but what does that have to do with trust?, here we go.\nBeginnings My first approach to Pomelo was through Maru, we already knew each other, Maru was the one who did the hiring process when I joined MercadoLibre, then we were close to meet again in Naranja X, but the impasse served well to meet again professionally in Pomelo, I tell this precisely because of the term of trust.\nDo you think Maru would have trusted me not just once, but twice, I don\u0026rsquo;t think so, she is an absolutely admirable person in building technology teams, and that trust we have in each other makes her trust me again and again and call me back:\nMaru trusts me again and again and calls me back. On my side, I take that trust and build (or try to build) the best possible work context. Meeting and mismatching In the more than 365 days that I have been in Pomelo I worked almost half of the time in the Processor team, I met again with familiar faces and met some new ones, I will name them, first the anecdote.\nI was at the Processor for a little more than 5 months, we reached the milestone (madness) of having the processor up and running and then in mid-January 2022 I moved to the infra team. Here two pillars were played, trust and respect, why I say this, the guys knew where I wanted to direct my career and supported me 100%.\nHowever, 7 months later they showed me that they are people in which I will trust infinitely beyond Pomelo, these people are: Brizi, Dami and Nico, I will not tell the details they know what I mean, but I wanted to thank them publicly ‚ù§Ô∏è.\nWith you, to the war with a toothpick I talked about my first stage in Pomelo, let\u0026rsquo;s move on to the second, \u0026ldquo;Migration to the Infrastructure team\u0026rdquo;.\nFrom January to this part and from minute zero Juanjo, Fede and Gus and knowing me, I would say nothing, gave me the space to create a space for debates and cross-examination. They listened to my proposals, made them their own, and together we carried them forward, they made parts of theirs I took them as my own and so surrounded by a pile of people with a human quality of another planet we did and we are doing incredible things.\nWhat is the point of all this, that getting promoted is not the main or only goal, building trust around you is countless times more important and is, at least in the values I pursue and seek, infinitely superior to any position we hold or obtain. any position we hold or obtain.\nFor now I do not want to bore or extend, soon I will write about the other two pillars that I feel indispensable to walk through life, humility and respect.\n","permalink":"https://luispe.github.io/blog/posts/career/","summary":"Anniversaries, be it a birthday, the end of the year or whatever, generally lead one to reflect.\nThis case would not be the exception, what is the anniversary, less than a month ago i completed one year in my current company (Pomelo), August 29, 2022 the promotions in the company were made public, I am part of the people who were promoted, I wanted to write some conclusions that I have drawn from these 365 days, two teams and a promotion.","title":"Anniversaries"},{"content":"In the following post we will rethink a concept commonly encountered and endorsed in the technology industry, technical debt.\nDifferent yardstick Let\u0026rsquo;s imagine that we need to paint the exterior of our house and we decide to hire a professional to do the job.\nAfter consulting several quotes we decided to hire the services of \u0026ldquo;x\u0026rdquo; to take care of the job.\nAfter a few days \u0026ldquo;x\u0026rdquo; tells us:\n- The work is finished.\nWe stood at the front of the house and noticed that around the window frames it is unpainted in some cases.\nNoticing this, we ask \u0026ldquo;x\u0026rdquo; why he did not paint around the window frames, to which he responds:\n- Sorry, it is a technical debt that I can attack in the future.\nHow would you feel if you encountered such a situation?\nWhy in the context of technology do we endorse having technical debt?\nRethink In technology it is very common to encounter this scenario and unfortunately we naturalize it and as I commented in a previous publication where I talk among other things about the importance of documenting and testing, it is something common that I always see as \u0026ldquo;technical debt\u0026rdquo;, rethinking the example of painting the house I think it exposes how we can have \u0026ldquo;different yardsticks\u0026rdquo; to measure the same situation in different contexts.\nWhy is technical debt harmful?\nIn test context: it is extremely difficult to make changes without exploding everything. In context of documentation: it is extremely difficult to add functionality because the lack of documentation causes us to waste an enormous amount of time trying to understand how things are built. In a team context: having technical debt means that the knowledge stays with the people and we should always, always encourage knowledge to be distributed. Conclusions The technical debt is very exhausting for the teams and where today we think we are gaining time, I assure you that soon, very soon, we will lose agility and speed in the development.\nIt can be avoided in most cases, and we do not accept it as a matter of course.\nFinally, I hope that we will rethink together the \u0026ldquo;technical debt\u0026rdquo; and that we will be uncomfortable with it.\nThank you for reading! üëãüèΩ\n","permalink":"https://luispe.github.io/blog/posts/technical-debt/","summary":"In the following post we will rethink a concept commonly encountered and endorsed in the technology industry, technical debt.\nDifferent yardstick Let\u0026rsquo;s imagine that we need to paint the exterior of our house and we decide to hire a professional to do the job.\nAfter consulting several quotes we decided to hire the services of \u0026ldquo;x\u0026rdquo; to take care of the job.\nAfter a few days \u0026ldquo;x\u0026rdquo; tells us:\n- The work is finished.","title":"Technical debt"},{"content":"In the following post I want to share a common mistake I used to make in my Golang projects. And as the title and description says, today we are going to talk about interfaces.\nYou will probably come across some references to another post I did on hexagonal architecture, I think part of the misuse of interfaces is the consequence of following \u0026ldquo;medium\u0026rdquo; publications to the letter and not taking the time to understand the underlying concept.\nPreface If there is something that we have to admit in the Golang ecosystem, it is the kink that we sometimes give ourselves with some/several issues. To give an example on how to name variables (which is a topic I want to talk about soon) and in today\u0026rsquo;s case with interfaces.\nGolang has its particularities, but it is based on many patterns already known in the industry. In the Go ecosystem sometimes we complex some patterns and fall into \u0026ldquo;anti patterns\u0026rdquo;, in the next post we will review a fake project and refactor it to make good use of the interfaces.\nTo simplify the publication a bit, we will narrow down the use case and reduce it to the service and repository layer.\nLet\u0026rsquo;s imagine that in the repository layer we find the following:\npackage repository import ( // pkg imports ) type Repository interface { Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) } type repository struct { // repository client and configs go here } func NewRepository() Repository { return \u0026amp;repository{} } func (repo *repository) Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) { // previous logic here return repo.toModel(beerEntity), nil } And in the service layer the following:\npackage service import ( // pkg imports ) type Service interface { Create(ctx context.Context, model *Beer) (*Beer, error) } type service struct { repo Repository } func NewService(repo Repository) Service { return \u0026amp;service{repo: repo} } func (svc *service) Create(ctx context.Context, model *Beer) (*Beer, error) { beer, err := svc.repo.Save(ctx, model) if err != nil { return nil, err } return beer, err } The above scenario is the one I commonly encounter in Go projects and I want to tell you that I also made the same mistake.\nAll good luispi, but what\u0026rsquo;s the mistake?\nGo interfaces generally belong to the package that uses values of the interface type, not to the package that implements those values. üôÄ üí•\nProposal/learning The implementation package must return concrete types (usually pointer or struct): that way, new methods can be added to implementations without requiring extensive refactoring.\nWith this in mind, let\u0026rsquo;s get to work\nFirst, let\u0026rsquo;s attack the repository layer, as the previous note says, we are going to return a structure and not the interface.\npackage repository import ( // pkg imports ) type Repository struct{ // repository client and configs go here } func NewRepository() Repository { return Repository{} } func (repo *Repository) Save(ctx context.Context, model *beer.Beer) (*beer.Beer, error) { // previous logic here return repo.toModel(beerEntity), nil } Let\u0026rsquo;s review the change.\nFirst we remove the interface and now the NewRepository() function returns the Repository structure, and second we add to Repository the save method.\nAll well and good luispi, but what do we gain with this change?\nSince we do not have to comply with any interface contract we are not tied to having to implement all the methods that the interface has.\nWe have to think of this package as a producer (producer) and always keep in mind that producers, again, return concrete types (usually a pointer or a structure).\nNow it is the turn to edit the consumer layer, in this case the service.\npackage service import ( // pkg imports ) type Repository interface { Save(ctx context.Context, beer *Beer) (*Beer, error) } type Service struct { repo Repository } func NewService(repo Repository) Service { return Service{repo: repo} } func (svc *Service) Create(ctx context.Context, beer *Beer) (*Beer, error) { createBeer, err := svc.repo.Save(ctx, beer) if err != nil { return nil, err } return createBeer, err } Let\u0026rsquo;s review the change.\nWe make several changes, first we declare the Repository interface and in the Service structure we inject the interface so that it can be consumed in the service methods.\nAs with the repository layer our NewService() now returns a structure and not an interface.\nFinally, we add the Create method to our Service.\nConclusions With these subtle but powerful changes our producer now has enormous flexibility.\nFinally, I want to thank my friend and mentor morenojp who shared with me this anti pattern and made me rethink and improve, once again, in this software development.\nSo as not to bore you and for the moment let\u0026rsquo;s take a break.\nSoon we will continue with small publications where we will try to rethink other anti-patterns.\nHave a good time! üëãüèΩ\nSources:\nwiki oficial de Golang go interfaces misuse ","permalink":"https://luispe.github.io/blog/posts/interfaces-correct-use/","summary":"In the following post I want to share a common mistake I used to make in my Golang projects. And as the title and description says, today we are going to talk about interfaces.\nYou will probably come across some references to another post I did on hexagonal architecture, I think part of the misuse of interfaces is the consequence of following \u0026ldquo;medium\u0026rdquo; publications to the letter and not taking the time to understand the underlying concept.","title":"Interfaces and \"copy paste\""},{"content":"The following publication could be said to be a continuation of another one where we talk about how having light images helps us in many aspects, if you still could not read it here I leave access.\nToday we are going to make a small, but important improvement, and we are going to find out why we are doing it.\nPreface As the last proposal in the post I shared above we stayed at this point:\n# First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026amp;\u0026amp; go mod verify COPY . ./ RUN GOOS=linux go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\u0026#34;/myapp\u0026#34;] If we have as a premise that container technology and its popularization with Docker is disruptive is largely because of the benefits of being able to build in different places and not find surprises when we start the application that is contained in the container, I invite you to think for a few seconds/minutes or as long as we need.\nCan an image enhancement be made for the Golang application?\nThe answer is yes, let\u0026rsquo;s get to work!\nProposal/learning Golang has one feature that is really powerful, and I\u0026rsquo;m not talking about goroutines, and that is the great virtue of being able to cross-compile.\nWhat is cross-compilation?, it is the feature of being able to compile from a host with a certain architecture and operating system (OS) the binary for another architecture or OS.\nSo to be a bit more specific we can from a host with OS = linux and architecture = amd64, compile a binary for OS = windows, architecture = 386 üî•.\nLet\u0026rsquo;s imagine now that where we run the containers for our applications the computation is linux as OS and with amd64 architecture.\nWith this in mind let\u0026rsquo;s make a small, but important improvement to our Dockerfile.\n# First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026amp;\u0026amp; go mod verify ENV GO111MODULE=on \\ CGO_ENABLED=0 \\ GOOS=linux \\ GOARCH=amd64 COPY . ./ RUN go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\u0026#34;/myapp\u0026#34;] Let\u0026rsquo;s first analyze the change and why we are making it.\nENV GO111MODULE=on \\ CGO_ENABLED=0 \\ GOOS=linux \\ GOARCH=amd64 CGO_ENABLED=0 we deactivate CGO\nGOARCH=amd64 we indicate the architecture\nGOOS=linux we indicate the SO\nAll good luispi, but what gain did we get?\nMaking sure to compile the application for the environment in which it will be executed will prevent several headaches or troubleshooting, and needless to say that we no longer care where we are going to do it (whatever our continuous integration channel), because by compiling, again, for the environment in which it will be executed, we can rest assured that we are shortening the margin of mishaps.\nSo as not to bore you and for the moment let\u0026rsquo;s take a break.\nHave a good time! üëãüèΩ\n","permalink":"https://luispe.github.io/blog/posts/when-the-context-matter/","summary":"The following publication could be said to be a continuation of another one where we talk about how having light images helps us in many aspects, if you still could not read it here I leave access.\nToday we are going to make a small, but important improvement, and we are going to find out why we are doing it.\nPreface As the last proposal in the post I shared above we stayed at this point:","title":"When context matters"},{"content":"In the following post I am going to share with you some tips and best practices to develop our container images, as an example we are going to create an image for an app in Golang, but the following tips apply to any language, let\u0026rsquo;s go!\nPreface To make our container images as small as possible in terms of weight (megabytes, gigabytes, etc.) is not a matter of taste, it helps us in many ways, here are some of them:\nReduce storage costs in the registry we use to manage our images. When we have to obtain the image to start the container it is clear that the lighter it is the faster the initialization of the container will be, and with this we win in two points. Costs, and by costs we mean the use of the networking we use to obtain the image and then initialize the container. Speed in auto scaling, it is clear that to obtain a 20 MB image versus a 900 MB image the first one, of course, is going to initialize with a higher speed. To give a few examples.\nLet\u0026rsquo;s start Let us imagine that we have the following Dockerfile to create our container image e.g:\nFROM golang:1.18 WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026amp;\u0026amp; go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main ENTRYPOINT [\u0026#34;/myapp\u0026#34;] Let\u0026rsquo;s build our docker build -t myapp:0.0.1 . image.\nIf we list the images that we have in our host we will be able to observe that the weight is approximately 968 MB.\nWhat? 968 MB just to make available a binary that weighs a few megabytes?\nNOTE\nIn all my publications you will find concepts, the idea is that we learn and not copy and paste.\nTo give an example RUN go build -o ./myapp ./path/to/main where ./path/to/main should be the main of your Golang app\nProposal/learning Let\u0026rsquo;s go with the first proposal. It is always a good practice to use -alpine images, by convention in the container universe when we make available an -alpine image we are indicating to the client that it is an image reduced in size and the one we should use in our Dockerfile, among other things.\nWell, let\u0026rsquo;s make a small change in our Dockerfile and build our image again\nFROM golang:1.18-alpine3.16 WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026amp;\u0026amp; go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main ENTRYPOINT [\u0026#34;/myapp\u0026#34;] If we pay attention the change was subtle, but effective, we went from FROM golang:1.18 to FROM golang:1.18-alpine3.16.\nLet\u0026rsquo;s build our docker build -t myapp:0.0.2 . image again.\nIf we list the images again we will find that now the myapp:0.0.2 image weighs approximately 331 MB.\nWe reduce, if the accounts do not fail, 637 MB.\nIt\u0026rsquo;s an excellent approach, but let\u0026rsquo;s rethink: do you have to have an image with all of Golang inside the container weighing about 331 MB to make available a binary that weighs a few megabytes?\nThe answer is clearly, no.\nSecond proposal The container technology has an excellent feature, that for our case, will help us to build a very light container image, in case you didn\u0026rsquo;t know, I\u0026rsquo;m talking about Multistage, I share with you the official documentation to deepen about this feature.\nWhat does Multistage consist of? It is about building images in stages so that we can share data between each one of them, and we will obtain a final image of a very small size.\nThe first thing we are going to do is to have a first stage of build, where we are going to build the binary, and a second stage where we are going to make it available for use.\nLet\u0026rsquo;s get to work, let\u0026rsquo;s open and make the following modifications to our Dockerfile.\n# First layer use to build a Golang binary FROM golang:1.18-alpine3.16 AS builder WORKDIR /build COPY go.mod go.sum ./ RUN go mod download \u0026amp;\u0026amp; go mod verify COPY . ./ RUN go build -o ./myapp ./path/to/main # Final layer expose app to minimal docker image FROM alpine:3.16.0 COPY --from=builder /build/myapp /myapp ENTRYPOINT [\u0026#34;/myapp\u0026#34;] As we can see, the first modification consists of tagging the first stage as a build. Then in the second and final stage with the following line COPY --from=builder /build/myapp /myapp we copy the binary from the stage that we have selected as builder and we make it available in an alpine image.\nIf we list now our images we can see that it weighs approximately 9 MB, yes yes, I wrote correctly 9 megabytes üòé.\nWe could do one last optimization or best practice, but I think it\u0026rsquo;s worth leaving it for another post.\nSo as not to bore you and for the moment let\u0026rsquo;s take a break.\nHave a good time! üëãüèΩ\n","permalink":"https://luispe.github.io/blog/posts/lightweight-container-image/","summary":"In the following post I am going to share with you some tips and best practices to develop our container images, as an example we are going to create an image for an app in Golang, but the following tips apply to any language, let\u0026rsquo;s go!\nPreface To make our container images as small as possible in terms of weight (megabytes, gigabytes, etc.) is not a matter of taste, it helps us in many ways, here are some of them:","title":"Size matters"},{"content":"This is the first of a series where we will review different development patterns that I made mistakes and what is currently and what I understand so far, the best way to apply it.\nAs the title of the publication says, today I want to talk about hexagonal architecture.\nPreface I have been noticing a lot of \u0026ldquo;hype\u0026rdquo; around the hexagonal architecture and I would like to be clear about it, I am not against it, on the contrary, I think it is an excellent pattern.\nBut I think we fall into the mistake of applying the publishing recipes of \u0026ldquo;medium\u0026rdquo; and not only end up with all the layers of our system coupled but with package names like \u0026ldquo;adapters\u0026rdquo; or \u0026ldquo;ports\u0026rdquo; and if there is something beautiful in the language of Go(lang) is the intentionality in the name of a package.\nA good name on the package means that almost nothing else is needed to express the intentionality of the package.\nI share and recommend you to read the following official publication, personal opinion, applies to any language.\nLet\u0026rsquo;s start Anti pattern\nAnnotation in our domain model e.g json.\nOne mistake I used to make is having json or gorm annotations or any annotations in the domain model.\nLet\u0026rsquo;s imagine that we have our /user/user.go model with the following content\ntype User struct { FirstName string `json:\u0026#34;first_name\u0026#34;` LastName string `json:\u0026#34;last_name\u0026#34;` } Before reading on, I invite you to take a few seconds/minutes to reflect on why this is an anti-pattern.\nProposal/learning Our model should be presentation and data layer agnostic, therefore, it should not contain any annotations. We should map the data to our model and vice versa, here is an example of what a rest HTTP controller would look like e.g.:\nuser/rest_controller.go\ntype UserDTO struct { FirstName string `json:\u0026#34;first_name\u0026#34;` LastName string `json:\u0026#34;last_name\u0026#34;` } func (ctrl *controller) toUserModel(userDTO *UserDTO) *User { return \u0026amp;User{ FirstName:\tuserDTO.FirstName, LastName:\tuserDTO.LastName, } } func (ctrl *controller) toUserDTO(user *User) *UserDTO { return \u0026amp;UserDTO{ FirstName:\tuser.FirstName, LastName:\tuser.LastName, } } As we can see in the previous example the private methods in the rest controller map from the data transfer object to the domain model when we call the service and vice versa.\nFinally, we remove the annotations in our user/user.go model.\ntype User struct { FirstName string LastName string } All good luispi, but what gain did we get?\nNow our /user/user.go not having any annotation no matter how we present or how we obtain/persist the data, we will never touch the core/domain of our application, now we could affirm that our core/domain is agnostic to the presentation or data layers gaining flexibility, testing, etc.\nSo as not to bore you and for the moment let\u0026rsquo;s take a break.\nSoon we will continue with small publications where we will try to rethink other anti-patterns.\nHave a good time! üëãüèΩ\n","permalink":"https://luispe.github.io/blog/posts/hexagonal-architecture/","summary":"This is the first of a series where we will review different development patterns that I made mistakes and what is currently and what I understand so far, the best way to apply it.\nAs the title of the publication says, today I want to talk about hexagonal architecture.\nPreface I have been noticing a lot of \u0026ldquo;hype\u0026rdquo; around the hexagonal architecture and I would like to be clear about it, I am not against it, on the contrary, I think it is an excellent pattern.","title":"Hexagonal Architecture"},{"content":"Hola En el blog vas a encontrarte con reflexiones y aprendizajes sobre mi vida en general.\nNo pretendo ser ejemplo de nada ni nadie, las opiniones que dejo ac√° son m√≠as, espero no ofender a nadie con ellas.\nMi nombre es Luis Pedro \u0026ndash;luispe\u0026ndash; tengo 38 a√±os nac√≠ y crec√≠ en Gonnet, una localidad de La Plata, BsAs, Argentina. De mi infancia conservo a una tonelada de amigos con los cuales ya compartimos 35 a√±os, ahora que lo escribo es una locura. Son mi gu√≠a y mi cable a tierra, si soy lo que soy es en parte gracias a ellos y a mi familia ‚ù§Ô∏è\nDesde muy peque√±o jugu√© al f√∫tbol en el club Gimnasia y Esgrima de La Plata, despu√©s de muchos a√±os cuando estaba en la 7ma divisi√≥n tuve que tomar la decisi√≥n de si el f√∫tbol iba a ser mi destino profesional o un deporte, la decisi√≥n fue que sea un deporte, este cap√≠tulo se merece una publicaci√≥n aparte.\nAl terminar la secundaria en La Plata estudi√© y me recib√≠ en el conservatorio Gilardo Gilardi y a la par tambi√©n me recib√≠ en un terciario de jazz (EMU).\nDespu√©s de varios discos, recitales y ensayos decid√≠ dar un giro a mi vida y comenc√© a estudiar en la UTN (FRLP) la carrera de ingenier√≠a en sistemas.\nEn 2012 comenc√© a trabajar en tecnolog√≠a y gracias a ella me hice de varios amigos que a√∫n y por fortuna conservo, no voy a nombrarlos porque temo olvidarme de m√°s de una o de uno.\nLuego de varios a√±os y ahora que lo escribo 38 y contando, es un buen momento para escribir, lo considero un buen canal para canalizar mis sensaciones que se suma a un buen vino, la m√∫sica mi familia y amigos.\nEntonces, ac√° va\u0026hellip; ¬°espero que lo disfrutes!\n","permalink":"https://luispe.github.io/blog/about/","summary":"Hola En el blog vas a encontrarte con reflexiones y aprendizajes sobre mi vida en general.\nNo pretendo ser ejemplo de nada ni nadie, las opiniones que dejo ac√° son m√≠as, espero no ofender a nadie con ellas.\nMi nombre es Luis Pedro \u0026ndash;luispe\u0026ndash; tengo 38 a√±os nac√≠ y crec√≠ en Gonnet, una localidad de La Plata, BsAs, Argentina. De mi infancia conservo a una tonelada de amigos con los cuales ya compartimos 35 a√±os, ahora que lo escribo es una locura.","title":"Acerca de m√≠"},{"content":"In our society in general and in technology in particular, we have the strange habit of publishing success stories (opinion of the writer, wrongly called successful case) and few, if any, occasions where mistakes are shared (opinion of the writer, wrongly called failure).\nAs you might be suspecting below I am going to share some mistakes, which I learned from them and even more how much I grew and understood about the industry by sharing them.\nLesson 1: Write a step-by-step, share it, validate and re-validate it before executing anything\nMy first productive development was in 2012 (?) approximately, it was a website for a company that needed to publish its product catalog, I list technologies to have some context:\ndigitalocean, just released, in addition to the droplets, I don\u0026rsquo;t know how many more products I had in my portfolio angular js (angular 1) I think nodeJS for the backend This development was done with one of the people I respect and admire the most, Victor De Grandis -Vitor-.\nMy experience configuring servers was null, I had the delirious idea of telling Vitor:\n_my friend, can I set up the server and then you try to break it?\nThen I started to make several configurations, among them I started to play with the ports, until I proudly told him:\nVitor, try to see what happens.\nAfter a while I receive a message,\nmy friend, could it be that you closed port 22?\nBeautiful, I left the house, locked the door and threw the key into a pond.\nAs the digitalocean people are prepared for people like this writer, they have a feature that if accessed from the web (I have no idea how to solve it from behind) you can run a terminal in the browser and access the droplet.\nI reconfigured the ports, and the rest is history.\nLesson 2: Document knowledge, no matter how trivial we consider it, and invite others to do the same. In addition to avoiding several \u0026ldquo;knowledge transfer\u0026rdquo; meetings, we will save several arrobas, remind you anything?\n@fulanito may be able to help you\nIn another team that I had the fortune to work in, small in number of people but from which I learned a lot, a lot from each one of them, unfortunately the adventure was very short in time.\nWhat I did find very strange as one by one people were leaving the team is that we were losing a lot of knowledge to the point of stopping engines (literally) and going weeks without delivering features to production because we had to sit down and figure out how to leave that local line of code and expose it to the internet.\nWhat mistakes did I detect and what did I learn?\nDocument knowledge, however trivial we may consider it, document it.\nOr perhaps, and I invite you to think for a few seconds, did you find yourself one or more times holding \u0026ldquo;knowledge transfer\u0026rdquo; meetings because someone was leaving the team?\nOr was it you who was leaving him?\nLesson 3: Job promotions should not be the only or the main objective, but the guide should be to share and acquire knowledge.\nLesson 3 bis:\nThinking and testing before implementing anything is a fundamental guide to understanding the behavior of our systems or the domain knowledge we have so far. Always, and let\u0026rsquo;s repeat, always, it is a gain in time.\nFinally, and in another place I worked, I met one of the best problem solvers, Juan Moreno, what is better for me, simple solutions to complex problems.\nAfter this small parenthesis and dedication to the person who today is one of my sources of consultation, I will try to explain teaching number 3 and 3 bis.\nIn pre-pandemic times, I used to - a habit I still have from afar - start early, having a couple of hours \u0026ldquo;alone\u0026rdquo; allows me to focus and prioritize as much as possible the things I want to do and have committed to do.\nOne of those mornings and as a consequence of a functionality that we were developing in the team, the leader arrived a little angry (to be kind) and grabbed the first ones he found from the team, thus being able to vent his anger because he had \u0026ldquo;looked bad\u0026rdquo; to his superiors because of all the casuistry there was a case that broke.\nFamous Take a breath and after a few minutes I joined him alone, I asked him a question:\nhow many people are involved in this functionality?\nHe understood with the question that he should have waited and told the whole team responsible what had happened and not grabbed the first people who crossed his path.\nFinally, I told him that I understood but did not share his anger or how he had handled it.\nI want to clarify that my intention is not to judge, but to share that I learned from that mistake, again:\nJob promotions should not be the only or main goal, you run the risk of being under enormous pressure not to rise to the occasion. Sharing and acquiring knowledge should be the guide.\nThinking and testing before implementing anything is the fundamental guide to understanding the behavior of our systems or the domain knowledge we have so far. Always, and let\u0026rsquo;s repeat, always, it is a gain in time.\nTo conclude, I understand that I will continue to make mistakes and share the experience they left me with, that does not make me any worse or better than anyone else.\nI am convinced that it is a healthy way of going through life where the \u0026ldquo;normal\u0026rdquo; thing to do is to be \u0026ldquo;successful\u0026rdquo; or as I like to make parallels with soccer, \u0026ldquo;playing for the stands\u0026rdquo;, but at the end of the day it is only an appearance.\nThank you for reading! üëãüèΩ\n","permalink":"https://luispe.github.io/blog/posts/mistakes-and-learnings/","summary":"In our society in general and in technology in particular, we have the strange habit of publishing success stories (opinion of the writer, wrongly called successful case) and few, if any, occasions where mistakes are shared (opinion of the writer, wrongly called failure).\nAs you might be suspecting below I am going to share some mistakes, which I learned from them and even more how much I grew and understood about the industry by sharing them.","title":"You learn from your mistakes, and if you share them, you grow."}]