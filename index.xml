<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>luispe – Home</title><link>https://luispe.github.io/blog/</link><description>Recent content in Home on luispe</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://luispe.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>The ticket Hell</title><link>https://luispe.github.io/blog/blog/ticket-hell/</link><pubDate>Wed, 19 Jun 2024 19:10:20 -0300</pubDate><guid>https://luispe.github.io/blog/blog/ticket-hell/</guid><description>
&lt;h2>Problem&lt;span class="hx-absolute -hx-mt-20" id="problem">&lt;/span>
&lt;a href="#problem" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;em>If you only have a hammer, all problems look like a nail.&lt;/em>&lt;/p>
&lt;p>Why do I start with this well-known phrase?,
first I want to give a little history and then I will explain why I mention it.&lt;/p>
&lt;p>In the infrastructure teams in which I have been working and leading for
some years I had the great fortune to cross paths with &lt;a href="https://www.linkedin.com/in/juanjosebehrend/" target="_blank" rel="noopener">Juanjo&lt;/a>.
From minute zero I heard him say, promote and defend him to the hilt:&lt;/p>
&lt;p>&lt;em>- Never fall into an infrastructure team that works by ticketing orders&lt;/em>&lt;/p>
&lt;h2>Positioning&lt;span class="hx-absolute -hx-mt-20" id="positioning">&lt;/span>
&lt;a href="#positioning" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>What is the rationale behind this firm position?&lt;/p>
&lt;ol>
&lt;li>You have to have an extremely strong end-to-end culture to be able
to determine which ticket is more important than another.&lt;/li>
&lt;li>The infrastructure team inherently has to grow if the technology
and product team expands into new functionality.&lt;/li>
&lt;li>It is extremely difficult to keep the infrastructure team motivated.&lt;/li>
&lt;li>It is impossible to innovate from the infrastructure team.&lt;/li>
&lt;/ol>
&lt;p>There are several other reasons, but at this point I consider
them to be the most important and I will explain each one of them.&lt;/p>
&lt;h3>1. Extremely strong culture&lt;span class="hx-absolute -hx-mt-20" id="1-extremely-strong-culture">&lt;/span>
&lt;a href="#1-extremely-strong-culture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Both infrastructure and QA teams are not usually involved in the roadmap
and technology and product sprint. In case it happens, it is done at the end of the mile
&amp;ldquo;when everything is already cooked&amp;rdquo;.&lt;/p>
&lt;p>Where am I going with this?, that if the infrastructure manager
gets two tickets and has to prioritize due to execution capacity issues,
the obvious question:&lt;/p>
&lt;p>which ticket do I prioritize?&lt;/p>
&lt;p>Good luck when you are there, because for customers theirs is the most important
thing in the world, and it is the most important thing above anything else.&lt;/p>
&lt;h3>2. Growth without sense&lt;span class="hx-absolute -hx-mt-20" id="2-growth-without-sense">&lt;/span>
&lt;a href="#2-growth-without-sense" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Let us suppose that the previous point is solved, this point that I am
going to explain next will not escape.&lt;/p>
&lt;p>Why do we say that infrastructure equipment inherently has to grow?&lt;/p>
&lt;p>If we fall into tickets that only the infrastructure team solves,
the more products and functionalities the company has, the more people
are needed from the infrastructure team to attack the demand for tickets.&lt;/p>
&lt;p>Congratulations, you have created an execution funnel.&lt;/p>
&lt;p>Solution? hire more talent for the infrastructure team.&lt;/p>
&lt;h3>3. Motivation&lt;span class="hx-absolute -hx-mt-20" id="3-motivation">&lt;/span>
&lt;a href="#3-motivation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Assume that points 1 and 2 are solved.&lt;/p>
&lt;p>The members of the infrastructure team are human, right?&lt;/p>
&lt;p>I say this because it is difficult to maintain motivation if &amp;ndash;in a job that is highly creativity-driven&amp;ndash;
we limit team members to &amp;ldquo;closing tickets&amp;rdquo; without any room for discussion or double-questioning.&lt;/p>
&lt;p>What can happen, high turnover in the infra team and a discomfort in the technology teams that,
if they are toxic, can accuse the infra team of blocking or bad experience in infrastructure management.&lt;/p>
&lt;p>What can I tell you about the latter, Keep Calm and I leave you a big hug.&lt;/p>
&lt;h3>4. Innovation&lt;span class="hx-absolute -hx-mt-20" id="4-innovation">&lt;/span>
&lt;a href="#4-innovation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Finally, if we have solved the previous 3 points, it is impossible to innovate, plain and simple.&lt;/p>
&lt;p>Why? A team that works simply closing tickets, focused only on participating
in a project by creating infrastructure, cannot possibly innovate.&lt;/p>
&lt;h2>Let&amp;rsquo;s go back to the beginning&lt;span class="hx-absolute -hx-mt-20" id="lets-go-back-to-the-beginning">&lt;/span>
&lt;a href="#lets-go-back-to-the-beginning" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;em>If you only have a hammer, all problems look like a nail.&lt;/em>&lt;/p>
&lt;p>Throughout the post I explained the rationale and the most
important points that a ticketing methodology for infrastructure management will impact.&lt;/p>
&lt;p>And I want to make it clear that it is not wrong to work by tickets
in an infrastructure team, &lt;strong>what is definitely wrong is that infrastructure management is done by tickets&lt;/strong>.&lt;/p>
&lt;p>And what does the hammer phrase? have to do with the fact that an agile methodology
was poorly implemented in many companies with the infrastructure teams
and &amp;ldquo;we must stop the ball&amp;rdquo; to reflect on why things are not working well in many places.&lt;/p>
&lt;p>And how can we avoid it?&lt;/p>
&lt;p>We must inject a product mindset into infrastructure teams, provide abstractions
with top-level experiences of the underlying platform chaos so that
product technology teams are self-sufficient in managing the software and associated infrastructure.&lt;/p>
&lt;p>I hope my experience will make you rethink how to form culture and work processes
for infrastructure teams in the company if you have questions or
need to discuss anything of what I wrote I am happy to meet you :)&lt;/p>
&lt;p>¡Have a good time! 👋🏽&lt;/p></description></item><item><title>Anniversaries</title><link>https://luispe.github.io/blog/blog/career/</link><pubDate>Fri, 02 Sep 2022 19:11:03 -0300</pubDate><guid>https://luispe.github.io/blog/blog/career/</guid><description>
&lt;p>Anniversaries, be it a birthday, the end of the year or whatever, generally lead one to reflect.&lt;/p>
&lt;p>This case would not be the exception, what is the anniversary, less than a month ago i completed
one year in my current company (&lt;a href="https://www.linkedin.com/company/pomelo-latam/mycompany/" target="_blank" rel="noopener">Pomelo&lt;/a>),
August 29, 2022 the promotions in the company were made public, I am part of the people who were promoted,
I wanted to write some conclusions that I have drawn from these 365 days, two teams and a promotion.&lt;/p>
&lt;h2>Pillars&lt;span class="hx-absolute -hx-mt-20" id="pillars">&lt;/span>
&lt;a href="#pillars" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Those who know me whether in my work or in my personal life, hear me talk about three principles
with which I try to mobilize myself and i search around me:&lt;/p>
&lt;ol>
&lt;li>Trust&lt;/li>
&lt;li>Humility&lt;/li>
&lt;li>Respect&lt;/li>
&lt;/ol>
&lt;h3>Trust&lt;span class="hx-absolute -hx-mt-20" id="trust">&lt;/span>
&lt;a href="#trust" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>I will try to explain what this pillar means to me.&lt;/p>
&lt;p>In one of &lt;a href="https://luispe.github.io/blog/posts/mistakes-and-learnings/" target="_blank" rel="noopener">my first publications&lt;/a> where I talk about
mistakes and learnings, I talk about the fact that moving up should not be the only or main goal, there are much,
much more important things and confidence is one of them.&lt;/p>
&lt;p>Ok luispi, but what does that have to do with trust?, here we go.&lt;/p>
&lt;h4>Beginnings&lt;span class="hx-absolute -hx-mt-20" id="beginnings">&lt;/span>
&lt;a href="#beginnings" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>My first approach to Pomelo was through &lt;a href="https://www.linkedin.com/in/marumoran/" target="_blank" rel="noopener">Maru&lt;/a>, we already knew each other,
Maru was the one who did the hiring process when I joined MercadoLibre, then we were close to meet again
in Naranja X, but the impasse served well to meet again professionally in Pomelo,
I tell this precisely because of the term of &lt;strong>trust&lt;/strong>.&lt;/p>
&lt;p>Do you think Maru would have trusted me not just once, but twice, I don&amp;rsquo;t think so, she is an absolutely
admirable person in building technology teams, and that trust we have in each other makes her trust me again and again
and call me back:&lt;/p>
&lt;ul>
&lt;li>Maru trusts me again and again and calls me back.&lt;/li>
&lt;li>On my side, I take that trust and build (or try to build) the best possible work context.&lt;/li>
&lt;/ul>
&lt;h4>Meeting and mismatching&lt;span class="hx-absolute -hx-mt-20" id="meeting-and-mismatching">&lt;/span>
&lt;a href="#meeting-and-mismatching" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>In the more than 365 days that I have been in Pomelo I worked almost half of the time in the Processor team,
I met again with familiar faces and met some new ones, I will name them, first the anecdote.&lt;/p>
&lt;p>I was at the Processor for a little more than 5 months, we reached the milestone (madness) of having
the processor up and running and then in mid-January 2022 I moved to the infra team.
Here two pillars were played, trust and respect, why I say this, the guys knew where I wanted to direct
my career and supported me 100%.&lt;/p>
&lt;p>However, 7 months later they showed me that they are people in which I will trust infinitely beyond Pomelo,
these people are: &lt;a href="https://www.linkedin.com/in/victoria-rodr%C3%ADguez-brizi-61639a55/" target="_blank" rel="noopener">Brizi&lt;/a>,
&lt;a href="https://www.linkedin.com/in/damian-tundis/" target="_blank" rel="noopener">Dami&lt;/a> and &lt;a href="https://www.linkedin.com/in/nsarfati/" target="_blank" rel="noopener">Nico&lt;/a>,
I will not tell the details they know what I mean, but I wanted to thank them publicly ❤️.&lt;/p>
&lt;h4>With you, to the war with a toothpick&lt;span class="hx-absolute -hx-mt-20" id="with-you-to-the-war-with-a-toothpick">&lt;/span>
&lt;a href="#with-you-to-the-war-with-a-toothpick" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>I talked about my first stage in Pomelo, let&amp;rsquo;s move on to the second, &amp;ldquo;Migration to the Infrastructure team&amp;rdquo;.&lt;/p>
&lt;p>From January to this part and from minute zero &lt;a href="https://www.linkedin.com/in/juanjosebehrend/" target="_blank" rel="noopener">Juanjo&lt;/a> and &lt;a href="https://www.linkedin.com/in/gustavo-adrian-gimenez-4894589b/" target="_blank" rel="noopener">Gus&lt;/a>
and knowing me, I would say nothing, gave me the space to create a space for debates and cross-examination.
They listened to my proposals, made them their own, and together we carried them forward,
they made parts of theirs I took them as my own and so surrounded by a pile of people with a
human quality of another planet we did and we are doing incredible things.&lt;/p>
&lt;p>What is the point of all this, that getting promoted is not the main or only goal, building trust around
you is countless times more important and is, at least in the values I pursue and seek, infinitely superior
to any position we hold or obtain. any position we hold or obtain.&lt;/p>
&lt;p>For now I do not want to bore or extend, soon I will write about the other two pillars that I feel
indispensable to walk through life, humility and respect.&lt;/p></description></item><item><title>Technical debt</title><link>https://luispe.github.io/blog/blog/technical-debt/</link><pubDate>Sat, 02 Jul 2022 16:36:17 -0300</pubDate><guid>https://luispe.github.io/blog/blog/technical-debt/</guid><description>
&lt;p>In the following post we will rethink a concept commonly encountered and endorsed
in the technology industry, technical debt.&lt;/p>
&lt;h2>Different yardstick&lt;span class="hx-absolute -hx-mt-20" id="different-yardstick">&lt;/span>
&lt;a href="#different-yardstick" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Let&amp;rsquo;s imagine that we need to paint the exterior of our house and we decide to hire a professional to do the job.&lt;/p>
&lt;p>After consulting several quotes we decided to hire the services of &amp;ldquo;x&amp;rdquo; to take care of the job.&lt;/p>
&lt;p>After a few days &amp;ldquo;x&amp;rdquo; tells us:&lt;/p>
&lt;p>- The work is finished.&lt;/p>
&lt;p>We stood at the front of the house and noticed that around the window frames it is unpainted in some cases.&lt;/p>
&lt;p>Noticing this, we ask &amp;ldquo;x&amp;rdquo; why he did not paint around the window frames, to which he responds:&lt;/p>
&lt;p>- Sorry, it is a technical debt that I can attack in the future.&lt;/p>
&lt;p>How would you feel if you encountered such a situation?&lt;/p>
&lt;p>Why in the context of technology do we endorse having technical debt?&lt;/p>
&lt;h2>Rethink&lt;span class="hx-absolute -hx-mt-20" id="rethink">&lt;/span>
&lt;a href="#rethink" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>In technology it is very common to encounter this scenario and unfortunately we naturalize it and as
I commented in a &lt;a href="https://luispe.github.io/blog/posts/mistakes-and-learnings/" target="_blank" rel="noopener">previous publication&lt;/a>
where I talk among other things about the importance of documenting and testing, it is something common that
I always see as &amp;ldquo;technical debt&amp;rdquo;, rethinking the example of painting the house I think it exposes
how we can have &amp;ldquo;different yardsticks&amp;rdquo; to measure the same situation in different contexts.&lt;/p>
&lt;p>Why is technical debt harmful?&lt;/p>
&lt;ul>
&lt;li>In test context: it is extremely difficult to make changes without exploding everything.&lt;/li>
&lt;li>In context of documentation: it is extremely difficult to add functionality because the lack of
documentation causes us to waste an enormous amount of time trying to understand how things are built.&lt;/li>
&lt;li>In a team context: having technical debt means that the knowledge stays with the people and we should always,
always encourage knowledge to be distributed.&lt;/li>
&lt;/ul>
&lt;h2>Conclusions&lt;span class="hx-absolute -hx-mt-20" id="conclusions">&lt;/span>
&lt;a href="#conclusions" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>The technical debt is very exhausting for the teams and where today we think we are gaining time,
I assure you that soon, very soon, we will lose agility and speed in the development.&lt;/p>
&lt;p>It can be avoided in most cases, and we do not accept it as a matter of course.&lt;/p>
&lt;p>Finally, I hope that we will rethink together the &amp;ldquo;technical debt&amp;rdquo; and that we will be uncomfortable with it.&lt;/p>
&lt;p>Thank you for reading! 👋🏽&lt;/p></description></item><item><title>Interfaces and "copy paste"</title><link>https://luispe.github.io/blog/blog/interfaces-correct-use/</link><pubDate>Mon, 20 Jun 2022 10:47:02 -0300</pubDate><guid>https://luispe.github.io/blog/blog/interfaces-correct-use/</guid><description>
&lt;p>In the following post I want to share a common mistake I used to make in my Golang projects.
And as the title and description says, today we are going to talk about interfaces.&lt;/p>
&lt;p>You will probably come across some references to another post I did on
&lt;a href="https://luispe.github.io/blog/posts/hexagonal-architecture/" target="_blank" rel="noopener">hexagonal architecture&lt;/a>, I think part of the misuse
of interfaces is the consequence of following &amp;ldquo;medium&amp;rdquo; publications to the letter and not taking the time
to understand the underlying concept.&lt;/p>
&lt;h2>Preface&lt;span class="hx-absolute -hx-mt-20" id="preface">&lt;/span>
&lt;a href="#preface" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>If there is something that we have to admit in the Golang ecosystem, it is the kink that we sometimes give ourselves
with some/several issues. To give an example on how to name variables (which is a topic I want to talk about soon)
and in today&amp;rsquo;s case with interfaces.&lt;/p>
&lt;p>Golang has its particularities, but it is based on many patterns already known in the industry.
In the Go ecosystem sometimes we complex some patterns and fall into &amp;ldquo;anti patterns&amp;rdquo;,
in the next post we will review a fake project and refactor it to make good use of the interfaces.&lt;/p>
&lt;p>To simplify the publication a bit, we will narrow down the use case and reduce it to the service and repository layer.&lt;/p>
&lt;p>Let&amp;rsquo;s imagine that in the repository layer we find the following:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">repository&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// repository client and configs go here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewRepository&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">repository&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// previous logic here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">toModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">beerEntity&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>And in the service layer the following:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>The above scenario is the one I commonly encounter in Go projects and I want to tell you that
I also made the same mistake.&lt;/p>
&lt;p>All good luispi, but what&amp;rsquo;s the mistake?&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Go interfaces generally belong to the package that uses values of the interface type,
not to the package that implements those values.&lt;/em> :scream_cat: :boom:&lt;/p>
&lt;/blockquote>
&lt;h2>Proposal/learning&lt;span class="hx-absolute -hx-mt-20" id="proposallearning">&lt;/span>
&lt;a href="#proposallearning" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>&lt;em>The implementation package must return concrete types (usually pointer or struct): that way,
new methods can be added to implementations without requiring extensive refactoring.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>With this in mind, let&amp;rsquo;s get to work&lt;/p>
&lt;p>First, let&amp;rsquo;s attack the repository layer, as the previous note says, we are going to return a
structure and not the interface.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// repository client and configs go here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewRepository&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">Repository&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// previous logic here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">toModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">beerEntity&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Let&amp;rsquo;s review the change.&lt;/p>
&lt;p>First we remove the interface and now the &lt;code>NewRepository()&lt;/code> function returns the &lt;code>Repository&lt;/code> structure,
and second we add to &lt;code>Repository&lt;/code> the save method.&lt;/p>
&lt;p>All well and good luispi, but what do we gain with this change?&lt;/p>
&lt;p>Since we do not have to comply with any interface contract we are not tied to having to implement
all the methods that the interface has.&lt;/p>
&lt;p>We have to think of this package as a producer (&lt;code>producer&lt;/code>) and always keep in mind that &lt;code>producers&lt;/code>, again,
return concrete types (usually a pointer or a structure).&lt;/p>
&lt;p>Now it is the turn to edit the consumer layer, in this case the &lt;code>service&lt;/code>.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">beer&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">Service&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Service&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">beer&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createBeer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">beer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">createBeer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Let&amp;rsquo;s review the change.&lt;/p>
&lt;p>We make several changes, first we declare the &lt;code>Repository&lt;/code> interface and in the &lt;code>Service&lt;/code> structure
we inject the interface so that it can be consumed in the service methods.&lt;/p>
&lt;p>As with the repository layer our &lt;code>NewService()&lt;/code> now returns a structure and not an interface.&lt;/p>
&lt;p>Finally, we add the &lt;code>Create&lt;/code> method to our &lt;code>Service&lt;/code>.&lt;/p>
&lt;h2>Conclusions&lt;span class="hx-absolute -hx-mt-20" id="conclusions">&lt;/span>
&lt;a href="#conclusions" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>With these subtle but powerful changes our &lt;code>producer&lt;/code> now has enormous flexibility.&lt;/p>
&lt;p>Finally, I want to thank my friend and mentor &lt;a href="https://www.linkedin.com/in/morenojp/" target="_blank" rel="noopener">morenojp&lt;/a> who shared with me
this anti pattern and made me rethink and improve, once again, in this software development.&lt;/p>
&lt;p>So as not to bore you and for the moment let&amp;rsquo;s take a break.&lt;/p>
&lt;p>Soon we will continue with small publications where we will try to rethink other anti-patterns.&lt;/p>
&lt;p>Have a good time! 👋🏽&lt;/p>
&lt;hr>
&lt;p>Sources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments#interfaces" target="_blank" rel="noopener">wiki oficial de Golang&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://8thlight.com/blog/go-interface-misuse/" target="_blank" rel="noopener">go interfaces misuse&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>When context matters</title><link>https://luispe.github.io/blog/blog/when-the-context-matter/</link><pubDate>Tue, 14 Jun 2022 18:45:35 -0300</pubDate><guid>https://luispe.github.io/blog/blog/when-the-context-matter/</guid><description>
&lt;p>The following publication could be said to be a continuation of another one where we talk
about how having lightweight images helps us in many aspects,
if you still could not read it here I leave you the access
&lt;a href="https://luispe.github.io/blog/posts/lightweight-container-image/" target="_blank" rel="noopener">the access&lt;/a>.&lt;/p>
&lt;p>Today we are going to make a small, but important improvement, and we are going to find out why we are doing it.&lt;/p>
&lt;h2>Preface&lt;span class="hx-absolute -hx-mt-20" id="preface">&lt;/span>
&lt;a href="#preface" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>As the last proposal in the post I shared earlier we stayed at this point:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># First layer use to build a Golang binary&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16 AS builder&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> &lt;span class="nv">GOOS&lt;/span>&lt;span class="o">=&lt;/span>linux go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Final layer expose app to minimal docker image&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> alpine:3.16.0&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>builder /build/myapp /myapp&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>If we have as a premise that container technology and its popularization with Docker
is disruptive is largely because of the benefits of being able to build in different
places and not find surprises when we start the application that is contained in the container,
I invite you to think for a few seconds / minutes or as long as we need.&lt;/p>
&lt;p>Can an image enhancement be made for the Golang application?&lt;/p>
&lt;p>The answer is yes, let&amp;rsquo;s get to work!&lt;/p>
&lt;h2>Proposal/learning&lt;span class="hx-absolute -hx-mt-20" id="proposallearning">&lt;/span>
&lt;a href="#proposallearning" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Golang has one feature that is really powerful, and I&amp;rsquo;m not talking about goroutines,
and that is the great virtue of being able to cross-compile.&lt;/p>
&lt;p>What is cross-compilation?, it is the feature of being able to compile
from a host with a certain architecture and operating system (OS)
the binary for another architecture or OS.&lt;/p>
&lt;p>So to be a little more specific we can from a host with OS = linux and
architecture = amd64, compile a binary for OS = windows, architecture = 386 :fire:.&lt;/p>
&lt;p>Let&amp;rsquo;s imagine now that where we run the containers for our applications
the computation is linux as OS and with amd64 architecture.&lt;/p>
&lt;p>With this in mind let&amp;rsquo;s make a small but important improvement to our Dockerfile.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># First layer use to build a Golang binary&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16 AS builder&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">GO111MODULE&lt;/span>&lt;span class="o">=&lt;/span>on &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">CGO_ENABLED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">GOOS&lt;/span>&lt;span class="o">=&lt;/span>linux &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">GOARCH&lt;/span>&lt;span class="o">=&lt;/span>amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Final layer expose app to minimal docker image&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> alpine:3.16.0&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>builder /build/myapp /myapp&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Let&amp;rsquo;s first analyze the change and why we are making it.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>ENV GO111MODULE=on \
CGO_ENABLED=0 \
GOOS=linux \
GOARCH=amd64&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;code>CGO_ENABLED=0&lt;/code> we deactivate CGO&lt;/p>
&lt;p>&lt;code>GOARCH=amd64&lt;/code> we indicate the architecture&lt;/p>
&lt;p>&lt;code>GOOS=linux&lt;/code> we indicate the SO&lt;/p>
&lt;p>All good luispi, but what gain did we get?&lt;/p>
&lt;p>Making sure to compile the application for the environment in which it will be executed
will prevent several headaches or troubleshooting, and needless to say
that we no longer care where we are going to do it (whatever our continuous integration channel),
because by compiling, again, for the environment in which it will be executed,
we can rest assured that we are shortening the margin of mishaps.&lt;/p>
&lt;p>So as not to bore you and for the moment let&amp;rsquo;s take a break.&lt;/p>
&lt;p>¡Have a good time! 👋🏽&lt;/p></description></item><item><title>Size matters</title><link>https://luispe.github.io/blog/blog/lightweight-container-image/</link><pubDate>Sat, 11 Jun 2022 17:49:18 -0300</pubDate><guid>https://luispe.github.io/blog/blog/lightweight-container-image/</guid><description>
&lt;p>In the following post I am going to share with you some tips and best practices to develop our container images,
as an example we are going to create an image for an app in Golang, but the following tips apply to any language, let&amp;rsquo;s go!&lt;/p>
&lt;h2>Preface&lt;span class="hx-absolute -hx-mt-20" id="preface">&lt;/span>
&lt;a href="#preface" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>To make our container images as small as possible in terms of weight (megabytes, gigabytes, etc.)
is not a matter of taste, it helps us in many ways, here are some of them:&lt;/p>
&lt;ul>
&lt;li>Reduce storage costs in the registry we use to manage our images.&lt;/li>
&lt;li>When we have to obtain the image to start the container it is clear that the lighter it is the faster the
initialization of the container will be, and with this we win in two points.
&lt;ul>
&lt;li>Costs, and by costs we mean the use of the networking we use to obtain the image and then initialize the container.&lt;/li>
&lt;li>Speed in auto scaling, it is clear that to obtain a 20 MB image versus a 900 MB image the first one, of course,
is going to initialize with a higher speed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>To give a few examples.&lt;/p>
&lt;h2>Let&amp;rsquo;s start&lt;span class="hx-absolute -hx-mt-20" id="lets-start">&lt;/span>
&lt;a href="#lets-start" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Let us imagine that we have the following Dockerfile to create our container image e.g:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Let&amp;rsquo;s build our &lt;code>docker build -t myapp:0.0.1 .&lt;/code> image.&lt;/p>
&lt;p>If we list the images that we have in our host we will be able to observe that the weight is approximately &lt;code>968 MB&lt;/code>.&lt;/p>
&lt;p>What? 968 MB just to make available a binary that weighs a few megabytes?&lt;/p>
&lt;blockquote>
&lt;p>NOTE&lt;/p>
&lt;p>In all my publications you will find concepts, the idea is that we learn and not copy and paste.&lt;/p>
&lt;p>To give an example &lt;code>RUN go build -o ./myapp ./path/to/main&lt;/code> where &lt;code>./path/to/main&lt;/code> should be the main of
your Golang app&lt;/p>
&lt;/blockquote>
&lt;h2>Proposal/learning&lt;span class="hx-absolute -hx-mt-20" id="proposallearning">&lt;/span>
&lt;a href="#proposallearning" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>Let&amp;rsquo;s go with the first proposal.&lt;span class="hx-absolute -hx-mt-20" id="lets-go-with-the-first-proposal">&lt;/span>
&lt;a href="#lets-go-with-the-first-proposal" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>It is always a good practice to use &lt;code>-alpine&lt;/code> images, by convention in the container universe when we make available
an &lt;code>-alpine&lt;/code> image we are indicating to the client that it is an image reduced in size and the one we should use in
our Dockerfile, among other things.&lt;/p>
&lt;p>Well, let&amp;rsquo;s make a small change in our Dockerfile and build our image again&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>If we pay attention the change was subtle, but effective, we went from &lt;code>FROM golang:1.18&lt;/code> to
&lt;code>FROM golang:1.18-alpine3.16&lt;/code>.&lt;/p>
&lt;p>Let&amp;rsquo;s build our &lt;code>docker build -t myapp:0.0.2 .&lt;/code> image again.&lt;/p>
&lt;p>If we list the images again we will find that now the &lt;code>myapp:0.0.2&lt;/code> image weighs approximately &lt;code>331 MB&lt;/code>.&lt;/p>
&lt;p>We reduce, if the accounts do not fail, 637 MB.&lt;/p>
&lt;p>It&amp;rsquo;s an excellent approach, but let&amp;rsquo;s rethink: do you have to have an image with all of Golang inside
the container weighing about 331 MB to make available a binary that weighs a few megabytes?&lt;/p>
&lt;p>The answer is clearly, no.&lt;/p>
&lt;h3>Second proposal&lt;span class="hx-absolute -hx-mt-20" id="second-proposal">&lt;/span>
&lt;a href="#second-proposal" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>The container technology has an excellent feature, that for our case, will help us to build a very light
container image, in case you didn&amp;rsquo;t know, I&amp;rsquo;m talking about Multistage, I share with you the
&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noopener">official documentation&lt;/a>
to deepen about this feature.&lt;/p>
&lt;p>What does Multistage consist of? It is about building images in stages so that we can share data between each
one of them, and we will obtain a final image of a very small size.&lt;/p>
&lt;p>The first thing we are going to do is to have a first stage of build, where we are going to build the binary,
and a second stage where we are going to make it available for use.&lt;/p>
&lt;p>Let&amp;rsquo;s get to work, let&amp;rsquo;s open and make the following modifications to our Dockerfile.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># First layer use to build a Golang binary&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16 AS builder&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Final layer expose app to minimal docker image&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> alpine:3.16.0&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>builder /build/myapp /myapp&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>As we can see, the first modification consists of tagging the first stage as a build.
Then in the second and final stage with the following line &lt;code>COPY --from=builder /build/myapp /myapp&lt;/code> we copy
the binary from the stage that we have selected as &lt;code>builder&lt;/code> and we make it available in an alpine image.&lt;/p>
&lt;p>If we list now our images we can see that it weighs approximately 9 MB, yes yes,
I wrote correctly 9 megabytes :sunglasses:.&lt;/p>
&lt;p>We could do one last optimization or best practice, but I think it&amp;rsquo;s worth leaving it for another post.&lt;/p>
&lt;p>So as not to bore you and for the moment let&amp;rsquo;s take a break.&lt;/p>
&lt;p>Have a good time! 👋🏽&lt;/p></description></item><item><title>Hexagonal Architecture</title><link>https://luispe.github.io/blog/blog/hexagonal-architecture/</link><pubDate>Thu, 09 Jun 2022 21:53:34 -0300</pubDate><guid>https://luispe.github.io/blog/blog/hexagonal-architecture/</guid><description>
&lt;p>This is the first of a series where we will review different development patterns that I made
mistakes and what is currently and what I understand so far, the best way to apply it.&lt;/p>
&lt;p>As the title of the publication says, today I want to talk about hexagonal architecture.&lt;/p>
&lt;h2>Preface&lt;span class="hx-absolute -hx-mt-20" id="preface">&lt;/span>
&lt;a href="#preface" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>I have been noticing a lot of &amp;ldquo;hype&amp;rdquo; around the hexagonal architecture and I would like to be clear about it,
I am not against it, on the contrary, I think it is an excellent pattern.&lt;/p>
&lt;p>But I think we fall into the mistake of applying the publishing recipes of &amp;ldquo;medium&amp;rdquo; and not only end up
with all the layers of our system coupled but with package names like &amp;ldquo;adapters&amp;rdquo; or &amp;ldquo;ports&amp;rdquo; and if there is
something beautiful in the language of Go(lang) is the intentionality in the name of a package.&lt;/p>
&lt;blockquote>
&lt;p>A good name on the package means that almost nothing else is needed to express the intentionality of the package.&lt;/p>
&lt;/blockquote>
&lt;p>I share and recommend you to read the following &lt;a href="https://go.dev/blog/package-names" target="_blank" rel="noopener">official publication&lt;/a>,
personal opinion, applies to any language.&lt;/p>
&lt;h2>Let&amp;rsquo;s start&lt;span class="hx-absolute -hx-mt-20" id="lets-start">&lt;/span>
&lt;a href="#lets-start" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Anti pattern&lt;/p>
&lt;p>Annotation in our domain model e.g &lt;code>json&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>One mistake I used to make is having &lt;code>json&lt;/code> or &lt;code>gorm&lt;/code> annotations or any annotations in the domain model.&lt;/p>
&lt;p>Let&amp;rsquo;s imagine that we have our &lt;code>/user/user.go&lt;/code> model with the following content&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;first_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;last_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Before reading on, I invite you to take a few seconds/minutes to reflect on why this is an anti-pattern.&lt;/p>
&lt;h2>Proposal/learning&lt;span class="hx-absolute -hx-mt-20" id="proposallearning">&lt;/span>
&lt;a href="#proposallearning" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Our model should be presentation and data layer agnostic, therefore, it should not contain any annotations.
We should map the data to our model and vice versa, here is an example of what a rest HTTP controller
would look like e.g.:&lt;/p>
&lt;p>&lt;code>user/rest_controller.go&lt;/code>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">UserDTO&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;first_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;last_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">toUserModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userDTO&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserDTO&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userDTO&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FirstName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userDTO&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">LastName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">toUserDTO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserDTO&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserDTO&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FirstName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">LastName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>As we can see in the previous example the private methods in the rest controller map from the &lt;code>data transfer object&lt;/code>
to the domain model when we call the service and vice versa.&lt;/p>
&lt;p>Finally, we remove the annotations in our &lt;code>user/user.go&lt;/code> model.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>All good luispi, but what gain did we get?&lt;/p>
&lt;p>Now our &lt;code>/user/user.go&lt;/code> not having any annotation no matter how we present or how we obtain/persist the data,
we will never touch the core/domain of our application, now we could affirm that our core/domain is agnostic
to the presentation or data layers gaining flexibility, testing, etc.&lt;/p>
&lt;p>So as not to bore you and for the moment let&amp;rsquo;s take a break.&lt;/p>
&lt;p>Soon we will continue with small publications where we will try to rethink other anti-patterns.&lt;/p>
&lt;p>Have a good time! 👋🏽&lt;/p></description></item><item><title>You learn from your mistakes, and if you share them, you grow.</title><link>https://luispe.github.io/blog/blog/mistakes-and-learnings/</link><pubDate>Sun, 05 Jun 2022 21:53:34 -0300</pubDate><guid>https://luispe.github.io/blog/blog/mistakes-and-learnings/</guid><description>
&lt;p>In our society in general and in technology in particular, we have the strange habit of publishing success
stories (opinion of the writer, wrongly called &lt;strong>successful case&lt;/strong>) and few, if any, occasions where
mistakes are shared (opinion of the writer, wrongly called &lt;strong>failure&lt;/strong>).&lt;/p>
&lt;p>As you might be suspecting below I am going to share some mistakes, which I learned from them and even more how much
I grew and understood about the industry by sharing them.&lt;/p>
&lt;h2>Lesson 1:&lt;span class="hx-absolute -hx-mt-20" id="lesson-1">&lt;/span>
&lt;a href="#lesson-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Write a step-by-step, share it, validate and re-validate it before executing anything&lt;/p>
&lt;/blockquote>
&lt;p>My first productive development was in 2012 (?) approximately, it was a website for a company that needed to publish
its product catalog, I list technologies to have some context:&lt;/p>
&lt;ul>
&lt;li>digitalocean, just released, in addition to the droplets, I don&amp;rsquo;t know how many more products I had in my portfolio&lt;/li>
&lt;li>angular js (angular 1)&lt;/li>
&lt;li>I think nodeJS for the backend&lt;/li>
&lt;/ul>
&lt;p>This development was done with one of the people I respect and admire the most, Victor De Grandis -Vitor-.&lt;/p>
&lt;p>My experience configuring servers was null, I had the delirious idea of telling Vitor:&lt;/p>
&lt;p>_my friend, can I set up the server and then you try to break it?&lt;/p>
&lt;p>Then I started to make several configurations, among them I started to play with the ports, until I proudly told him:&lt;/p>
&lt;p>&lt;em>Vitor, try to see what happens&lt;/em>.&lt;/p>
&lt;p>After a while I receive a message,&lt;/p>
&lt;p>&lt;em>my friend, could it be that you closed port 22?&lt;/em>&lt;/p>
&lt;p>Beautiful, I left the house, locked the door and threw the key into a pond.&lt;/p>
&lt;p>As the digitalocean people are prepared for people like this writer, they have a feature that if accessed
from the web (I have no idea how to solve it from behind) you can run a terminal in the browser and access the droplet.&lt;/p>
&lt;p>I reconfigured the ports, and the rest is history.&lt;/p>
&lt;h2>Lesson 2:&lt;span class="hx-absolute -hx-mt-20" id="lesson-2">&lt;/span>
&lt;a href="#lesson-2" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Document knowledge, no matter how trivial we consider it, and invite others to do the same.
In addition to avoiding several &amp;ldquo;knowledge transfer&amp;rdquo; meetings, we will save several arrobas, remind you anything?&lt;/p>
&lt;p>@fulanito may be able to help you&lt;/p>
&lt;/blockquote>
&lt;p>In another team that I had the fortune to work in, small in number of people but from which I learned a lot,
a lot from each one of them, unfortunately the adventure was very short in time.&lt;/p>
&lt;p>What I did find very strange as one by one people were leaving the team is that we were losing a lot of knowledge
to the point of stopping engines (literally) and going weeks without delivering features to production because
we had to sit down and figure out how to leave that local line of code and expose it to the internet.&lt;/p>
&lt;p>What mistakes did I detect and what did I learn?&lt;/p>
&lt;p>Document knowledge, however trivial we may consider it, document it.&lt;/p>
&lt;p>Or perhaps, and I invite you to think for a few seconds, did you find yourself one or more times holding
&amp;ldquo;knowledge transfer&amp;rdquo; meetings because someone was leaving the team?&lt;/p>
&lt;p>Or was it you who was leaving him?&lt;/p>
&lt;h2>Lesson 3:&lt;span class="hx-absolute -hx-mt-20" id="lesson-3">&lt;/span>
&lt;a href="#lesson-3" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Job promotions should not be the only or the main objective, but the guide should be to share and acquire knowledge.&lt;/p>
&lt;p>Lesson 3 bis:&lt;/p>
&lt;p>Thinking and testing before implementing anything is a fundamental guide to understanding the behavior
of our systems or the domain knowledge we have so far. Always, and let&amp;rsquo;s repeat, &lt;strong>always&lt;/strong>, it is a gain in time.&lt;/p>
&lt;/blockquote>
&lt;p>Finally, and in another place I worked, I met one of the best problem solvers,
&lt;a href="https://www.linkedin.com/in/morenojp/" target="_blank" rel="noopener">Juan Moreno&lt;/a>, what is better for me, simple solutions to complex problems.&lt;/p>
&lt;p>After this small parenthesis and dedication to the person who today is one of my sources of consultation,
I will try to explain teaching number 3 and 3 bis.&lt;/p>
&lt;p>In pre-pandemic times, I used to - a habit I still have from afar - start early, having a couple of hours &amp;ldquo;alone&amp;rdquo;
allows me to focus and prioritize as much as possible the things I want to do and have committed to do.&lt;/p>
&lt;p>One of those mornings and as a consequence of a functionality that we were developing in the team,
the leader arrived a little angry (to be kind) and grabbed the first ones he found from the team,
thus being able to vent his anger because he had &amp;ldquo;looked bad&amp;rdquo; to his superiors because of all the casuistry
there was a case that broke.&lt;/p>
&lt;p>Famous &lt;em>Take a breath&lt;/em> and after a few minutes I joined him alone, I asked him a question:&lt;/p>
&lt;p>&lt;em>how many people are involved in this functionality?&lt;/em>&lt;/p>
&lt;p>He understood with the question that he should have waited and told the whole team responsible what had happened
and not grabbed the first people who crossed his path.&lt;/p>
&lt;p>Finally, I told him that I understood but did not share his anger or how he had handled it.&lt;/p>
&lt;p>I want to clarify that my intention is not to judge, but to share that I learned from that mistake, again:&lt;/p>
&lt;blockquote>
&lt;p>Job promotions should not be the only or main goal, you run the risk of being under enormous
pressure not to rise to the occasion. Sharing and acquiring knowledge should be the guide.&lt;/p>
&lt;p>Thinking and testing before implementing anything is the fundamental guide to understanding the behavior
of our systems or the domain knowledge we have so far.
Always, and let&amp;rsquo;s repeat, &lt;strong>always&lt;/strong>, it is a gain in time.&lt;/p>
&lt;/blockquote>
&lt;p>To conclude, I understand that I will continue to make mistakes and share the experience they left me with,
that does not make me any worse or better than anyone else.&lt;/p>
&lt;p>I am convinced that it is a healthy way of going through life where the &amp;ldquo;normal&amp;rdquo; thing to do is to be &amp;ldquo;successful&amp;rdquo;
or as I like to make parallels with soccer, &amp;ldquo;playing for the stands&amp;rdquo;, but at the end of the day
it is only an appearance.&lt;/p>
&lt;p>Thank you for reading! 👋🏽&lt;/p></description></item></channel></rss>