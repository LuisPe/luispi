<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>luispe – Docker</title><link>https://luispe.github.io/blog/es/tags/docker/</link><description>Recent content in Docker on luispe</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Tue, 14 Jun 2022 18:45:35 -0300</lastBuildDate><atom:link href="https://luispe.github.io/blog/es/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Cuando el contexto importa</title><link>https://luispe.github.io/blog/es/blog/when-the-context-matter/</link><pubDate>Tue, 14 Jun 2022 18:45:35 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/when-the-context-matter/</guid><description>
&lt;p>La siguiente publicación se podría decir que es una continuación de otra donde hablamos de como tener imágenes livianas
nos ayuda en muchos aspectos, si aún no pudiste leerla acá te dejo
&lt;a href="https://luispe.github.io/blog/posts/lightweight-container-image/" target="_blank" rel="noopener">el acceso&lt;/a>.&lt;/p>
&lt;p>Hoy vamos a realizar una pequeña, pero importante mejora, y vamos a descubrir porque la estamos realizando.&lt;/p>
&lt;h2>Preámbulo&lt;span class="hx-absolute -hx-mt-20" id="preámbulo">&lt;/span>
&lt;a href="#pre%c3%a1mbulo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Como última propuesta en la publicación que compartí anteriormente nos quedamos en este punto:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code># First layer use to build a Golang binary
FROM golang:1.18-alpine3.16 AS builder
WORKDIR /build
COPY go.mod go.sum ./
RUN go mod download &amp;amp;&amp;amp; go mod verify
COPY . ./
RUN GOOS=linux go build -o ./myapp ./path/to/main
# Final layer expose app to minimal docker image
FROM alpine:3.16.0
COPY --from=builder /build/myapp /myapp
ENTRYPOINT [&amp;#34;/myapp&amp;#34;]&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Si tenemos como premisa que la tecnología de containers y su popularización con Docker es disruptiva es en gran medida
por los beneficios de poder construir en diferentes lugares y no encontrarnos con sorpresas cuando iniciamos la aplicación
que está contenida en el container, te invito a que pensemos durante unos segundos/minutos o el tiempo que necesitemos.&lt;/p>
&lt;p>¿Se puede realizar una mejora en la imagen para la aplicación de Golang?&lt;/p>
&lt;p>La respuesta es si, ¡manos a la obra!&lt;/p>
&lt;h2>Propuesta/aprendizaje&lt;span class="hx-absolute -hx-mt-20" id="propuestaaprendizaje">&lt;/span>
&lt;a href="#propuestaaprendizaje" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Golang posee una característica que es realmente poderosa, y no estoy hablando de las goroutines, y es la gran virtud de
poder realizar compilación cruzada.&lt;/p>
&lt;p>¿Qué es compilación cruzada?, es la característica de poder compilar desde un host con una determinada arquitectura y
sistema operativo (SO) el binario para otra arquitectura o SO.&lt;/p>
&lt;p>Entonces para ser un poco más específicos podemos desde un host con SO = linux y arquitectura = amd64, compilar un binario
para SO = windows, arquitectura = 386 :fire:.&lt;/p>
&lt;p>Imaginemos ahora que donde corremos los contenedores para nuestras aplicaciones el cómputo es linux como SO y con
arquitectura amd64.&lt;/p>
&lt;p>Con esto en mente realicemos una pequeña, pero importante mejora en nuestro Dockerfile.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code># First layer use to build a Golang binary
FROM golang:1.18-alpine3.16 AS builder
WORKDIR /build
COPY go.mod go.sum ./
RUN go mod download &amp;amp;&amp;amp; go mod verify
ENV GO111MODULE=on \
CGO_ENABLED=0 \
GOOS=linux \
GOARCH=amd64
COPY . ./
RUN go build -o ./myapp ./path/to/main
# Final layer expose app to minimal docker image
FROM alpine:3.16.0
COPY --from=builder /build/myapp /myapp
ENTRYPOINT [&amp;#34;/myapp&amp;#34;]&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Primero analicemos el cambio y porque lo realizamos.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>ENV GO111MODULE=on \
CGO_ENABLED=0 \
GOOS=linux \
GOARCH=amd64&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;code>CGO_ENABLED=0&lt;/code> desactivamos CGO&lt;/p>
&lt;p>&lt;code>GOARCH=amd64&lt;/code> indicamos la arquitectura&lt;/p>
&lt;p>&lt;code>GOOS=linux&lt;/code> indicamos el SO&lt;/p>
&lt;p>Todo bien luispi, ¿pero qué ganancia obtuvimos?&lt;/p>
&lt;p>Asegurarnos de compilar la aplicación para el entorno en el que va a ser ejecutado nos va a prevenir varios dolores de
cabeza o &amp;ldquo;troubleshooting&amp;rdquo;, y de más esta decir que ya no nos importa donde vamos a hacerlo (cualquiera sea nuestro canal
de integración continua), porque realizando la compilación, de nuevo, para el entorno en que va a ser ejecutado, nos
quedamos tranquilos de que estamos acortando el margen de contratiempos.&lt;/p>
&lt;p>Para no aburrirte y por el momento hagamos una pausa.&lt;/p>
&lt;p>¡Que pase bien! 👋🏽&lt;/p></description></item><item><title>El tamaño importa</title><link>https://luispe.github.io/blog/es/blog/lightweight-container-image/</link><pubDate>Sat, 11 Jun 2022 17:49:18 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/lightweight-container-image/</guid><description>
&lt;p>En la siguiente publicación voy a compartirles algunos consejos y buenas prácticas para desarrollar nuestras imágenes
de container, como ejemplo vamos a crear una imagen para una app en Golang, pero los siguientes consejos aplican
para cualquier lenguaje, ¡vamos!&lt;/p>
&lt;h2>Preámbulo&lt;span class="hx-absolute -hx-mt-20" id="preámbulo">&lt;/span>
&lt;a href="#pre%c3%a1mbulo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Perseguir que nuestras imágenes de container sean lo más reducida posible en cuanto a su peso (megabytes, gigabytes, etc)
no es una cuestión de gustos, nos ayuda en muchos aspectos, a continuación les comparto algunos:&lt;/p>
&lt;ul>
&lt;li>Reduce gastos de storage en el registry que utilizamos para gestionar nuestras imágenes.&lt;/li>
&lt;li>Cuando tengamos que obtener la imagen para iniciar el container queda claro que mientras más liviana sea más rápido
va a ser la inicialización del container, y con esto ganamos en dos puntos.
&lt;ul>
&lt;li>Costos, y con costos nos referimos al uso del networking que utilicemos para obtener la imagen y luego inicializar
el container.&lt;/li>
&lt;li>Velocidad en auto scaling, está claro que obtener una imagen de 20 MB versus una de 900 MB la primera, claro está, va a
inicializarse con mayor velocidad.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Por dar algunos ejemplos.&lt;/p>
&lt;h2>Comencemos&lt;span class="hx-absolute -hx-mt-20" id="comencemos">&lt;/span>
&lt;a href="#comencemos" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Imaginemos que tenemos el siguiente Dockerfile para crear nuestra imagen de container e.g:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Construyamos nuestra imagen &lt;code>docker build -t myapp:0.0.1 .&lt;/code>&lt;/p>
&lt;p>Si listamos las imágenes que tengamos en nuestro host vamos a poder observar que el peso es de aproximadamente &lt;code>968 MB&lt;/code>&lt;/p>
&lt;p>What? 968 MB solo para disponibilizar un binario que pesa unos pocos megas?&lt;/p>
&lt;blockquote>
&lt;p>NOTA&lt;/p>
&lt;p>En todas mis publicaciones vas a encontrarte con conceptos, la idea es que aprendamos y no copiemos y peguemos.
Por dar un ejemplo &lt;code>RUN go build -o ./myapp ./path/to/main&lt;/code> donde &lt;code>./path/to/main&lt;/code> debería estar el main de tu app de
Golang&lt;/p>
&lt;/blockquote>
&lt;h2>Propuesta/aprendizaje&lt;span class="hx-absolute -hx-mt-20" id="propuestaaprendizaje">&lt;/span>
&lt;a href="#propuestaaprendizaje" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>Vamos con la primera propuesta.&lt;span class="hx-absolute -hx-mt-20" id="vamos-con-la-primera-propuesta">&lt;/span>
&lt;a href="#vamos-con-la-primera-propuesta" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Siempre es una buena práctica usar imágenes &lt;code>-alpine&lt;/code>, por convención en el universo de container cuando disponibilizamos
una imagen &lt;code>-alpine&lt;/code> estamos indicando al cliente que es una imagen reducida en tamaño y la que deberíamos utilizar en
nuestro Dockerfile, entre otras cosas.&lt;/p>
&lt;p>Bien, realicemos un pequeño cambio en nuestro Dockerfile y volvamos a construir nuestra imagen&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Si prestamos atención el cambio fue sutil, pero efectivo, pasamos de &lt;code>FROM golang:1.18&lt;/code> a &lt;code>FROM golang:1.18-alpine3.16&lt;/code>&lt;/p>
&lt;p>Construyamos nuevamente nuestra imagen &lt;code>docker build -t myapp:0.0.2 .&lt;/code>&lt;/p>
&lt;p>Si volvemos a listar las imágenes nos vamos a encontrar con que ahora la imagen &lt;code>myapp:0.0.2&lt;/code> pesa aproximadamente &lt;code>331 MB&lt;/code>&lt;/p>
&lt;p>Reducimos, si las cuentas no fallan, 637 MB.&lt;/p>
&lt;p>Es una excelente &amp;ldquo;approach&amp;rdquo; pero repensemos. ¿Hace falta tener una imagen con todo Golang dentro del container pesando
cerca de 331 MB para disponibilizar un binario que pesa unos cuantos megabytes?.&lt;/p>
&lt;p>La respuesta es claramente, no.&lt;/p>
&lt;h3>Segunda propuesta&lt;span class="hx-absolute -hx-mt-20" id="segunda-propuesta">&lt;/span>
&lt;a href="#segunda-propuesta" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>La tecnología de container tiene una característica excelente, que para nuestro caso, nos va a ayudar a construir una
imagen de container muy liviana, por si no lo sabías, estoy hablando de Multistage, te comparto la
&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noopener">documentación oficial&lt;/a> para que profundices sobre esta
característica.&lt;/p>
&lt;p>¿En qué consiste Multistage?, se trata de construir imágenes por etapas pudiendo así compartir datos entre cada una de
ellas y vamos a obtener una imagen final de un tamaño muy pequeño.&lt;/p>
&lt;p>Lo primero que vamos a hacer es tener una primera etapa de build, donde vamos a construir el binario, y una segunda
etapa donde vamos a dejarlo disponible para utilizarlo.&lt;/p>
&lt;p>Manos a la obra, abramos y realicemos las siguientes modificaciones a nuestro Dockerfile.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># First layer use to build a Golang binary&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16 AS builder&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Final layer expose app to minimal docker image&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> alpine:3.16.0&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>builder /build/myapp /myapp&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Como podemos observar la primera modificación consiste en taguear la primera etapa como build.
Luego en la segunda y etapa final con la siguiente línea &lt;code>COPY --from=builder /build/myapp /myapp&lt;/code> copiamos el binario
desde la etapa que tagueamos como &lt;code>builder&lt;/code> y lo disponibilizamos en una imagen alpine.&lt;/p>
&lt;p>Si listamos ahora nuestras imágenes podemos observar que pesa aproximadamente 9 MB, si si, escribi correctamente
9 megabytes :sunglasses:.&lt;/p>
&lt;p>Podríamos realizar una última optimización o buena práctica, pero creo que vale la pena dejarlo para otra publicación.&lt;/p>
&lt;p>Para no aburrirte y por el momento hagamos una pausa.&lt;/p>
&lt;p>¡Que pase bien!&lt;/p></description></item></channel></rss>