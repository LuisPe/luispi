<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>luispe – Blog</title><link>https://luispe.github.io/blog/es/blog/</link><description>Recent content in Blog on luispe</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="https://luispe.github.io/blog/es/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Todos deberíamos gestionar equipos</title><link>https://luispe.github.io/blog/es/blog/we-should-allmanageteams/</link><pubDate>Sat, 22 Jun 2024 11:10:25 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/we-should-allmanageteams/</guid><description>
&lt;p>Para tener un contexto por si llegaste de casualidad a esta publicación,
voy a hablar desde la industria de tecnología, industria profundamente técnica,
y cómo liderar equipos, al menos por un lapso de tiempo,
puede ayudar al equipo y a vos mismo, tanto de forma profesional como personal.&lt;/p>
&lt;h2>Cómo impacta en tu ansiedad y la del equipo gestionarlo&lt;span class="hx-absolute -hx-mt-20" id="cómo-impacta-en-tu-ansiedad-y-la-del-equipo-gestionarlo">&lt;/span>
&lt;a href="#c%c3%b3mo-impacta-en-tu-ansiedad-y-la-del-equipo-gestionarlo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Que tema la ansiedad, soy de Argentina, país con la mayor cantidad de
psicólogos por habitante, no es un dato ni bueno ni malo, de hecho hace más
de diez años hago terapia para repensarme y repensar a la sociedad.&lt;/p>
&lt;p>Traigo este dato por el tema de la ansiedad y merece un capítulo aparte,
como las redes sociales intensificaron este fenómeno.&lt;/p>
&lt;p>Pero volvamos al punto que quiero desarrollar, la ansiedad en la gestión de equipos.&lt;/p>
&lt;p>Vivimos en una sociedad que está apurada por llegar donde desarrollamos aplicaciones
que fomentan compartir videos de segundos porque no soportamos ver
un video de más de 30 segundos, donde compartir información se tiene que comprimir en
140 caracteres y si es un thread mas largo uf ni ganas de leerlo. Con este contexto de ansiedad
gestionar y desarrollar equipos es un desafío enorme casi titánico diría.&lt;/p>
&lt;p>Robado de una charla de Paenza &lt;a href="https://youtu.be/ARXdEMbPTGs?si=8mNgRBn3z2x4b84V" target="_blank" rel="noopener">charla completa&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>No debe haber ningún otro año en la vida de una persona en donde uno
incorpore tanta información, aprenda tanto, cambie tanto de calidad de vida,
como de 0 a 1 año&lt;/p>
&lt;/blockquote>
&lt;p>¿A qué voy con este punto?&lt;/p>
&lt;p>Que los aportes que uno vaya haciendo en el equipo y las personas
son lentos muuuuy lentos, y en la mayoría de los casos casi imperceptibles y
mal que te pese vas a tener que aprender a manejar tu ansiedad y apoyar al
equipo para que maneje la suya.&lt;/p>
&lt;p>Otro punto que me parece muy curioso es esa capacidad (y esto también lo comenta el
gran Paenza en la charla que te compartí recientemente) de tener cero paciencia para
enfrentar un problema, necesitamos respuestas para todo, y si, eso es en parte
por la ansiedad que manejamos. Fomentemos la capacidad de resolver problemas
no todo en la vida tiene una solución ni hay respuestas para todo.&lt;/p>
&lt;blockquote>
&lt;p>Fomentemos la capacidad de resolver problemas
no todo en la vida tiene una solución ni hay respuestas para todo.&lt;/p>
&lt;/blockquote>
&lt;p>Por último, en muchas empresas es común encontrarse con procesos de
&amp;ldquo;performance review&amp;rdquo; dos veces al año y quiero dejar una pregunta en el aire.&lt;/p>
&lt;p>¿Realmente creemos que una persona puede hacer una evolución en un lapso de seis meses?&lt;/p>
&lt;p>Y acá cobra mas sentido el fragmento de la charla de Paenza&lt;/p>
&lt;blockquote>
&lt;p>No debe haber ningún otro año en la vida de una persona en donde uno
incorpore tanta información, aprenda tanto, cambie tanto de calidad de vida,
como de 0 a 1 año&lt;/p>
&lt;/blockquote>
&lt;h2>La búsqueda de feedback rápido para sentirse valioso&lt;span class="hx-absolute -hx-mt-20" id="la-búsqueda-de-feedback-rápido-para-sentirse-valioso">&lt;/span>
&lt;a href="#la-b%c3%basqueda-de-feedback-r%c3%a1pido-para-sentirse-valioso" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Una de las cosas que me hubiese encantado que me aconsejen cuando
comencé a gestionar y liderar equipos es buscar cosas que me den un retorno
rápido de dopamina.&lt;/p>
&lt;p>Cuando uno está liderando y gestionando equipos los procesos de cambio son muy lentos
y uno tiende a pensar que es inservible y que no está haciendo &amp;ldquo;nada productivo&amp;rdquo;, calma.&lt;/p>
&lt;p>No me gustan los tips ni los trucos, pero algo que me sirvió y que me hubiese gustado
que me aconsejen es buscar eso que te da felicidad, escribir un fragmento de código
o refactorizar, documentar, cualquier cosa, pero algo que te haga sentir que
estás aportando valor al equipo, de nuevo, ya liderar y tomar decisiones aportan
un valor brutal, la macana es que es imperceptible y uno es humano y necesita
sentirse útil y valioso.&lt;/p>
&lt;h2>¿Tengo un crecimiento personal?&lt;span class="hx-absolute -hx-mt-20" id="tengo-un-crecimiento-personal">&lt;/span>
&lt;a href="#tengo-un-crecimiento-personal" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>¿Qué pasaría si lideramos un equipo al menos por un año?&lt;/p>
&lt;p>Aunque no sea el path de carrera que elegiste, liderar y gestionar un equipo
va a brindarte herramientas importantísimas, más importantes que cualquier patrón
de diseño y arquitectura de software.&lt;/p>
&lt;p>Vas a aprender a controlar tus emociones, egos, frustraciones,
vas a aprender a negociar, confiar, aconsejar, direccionar, pedir perdón y mostrarte vulnerable,
podría seguir por un rato largo, pero creo que me explico el nivel de información
y herramientas que puede brindarte.&lt;/p>
&lt;p>La respuesta es sí, vas a tener un crecimiento personal y claramente profesional.&lt;/p>
&lt;h2>Lo obvio, no todo tiene que pasar por vos, ni tenés que estar al tanto de todo&lt;span class="hx-absolute -hx-mt-20" id="lo-obvio-no-todo-tiene-que-pasar-por-vos-ni-tenés-que-estar-al-tanto-de-todo">&lt;/span>
&lt;a href="#lo-obvio-no-todo-tiene-que-pasar-por-vos-ni-ten%c3%a9s-que-estar-al-tanto-de-todo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>¿Cuántas veces te cruzaste con &amp;ldquo;líderes tóxicos&amp;rdquo;?, ¿Qué es tóxico para mí?&lt;/p>
&lt;p>Esas personas que son embudo, todo tiene que pasar por ellas, todo el tiempo
necesitan que las diferentes decisiones pasen por ellas y casi el 100% de las veces
predominan sus decisiones.&lt;/p>
&lt;p>¿Qué nos propongo?&lt;/p>
&lt;p>Impulsemos y acompañemos el crecimiento de las personas del equipo y al equipo,
compartamos conocimiento y estemos abiertos a nuevas y ideas y propuestas.&lt;/p>
&lt;p>Personalmente hablando el día que me fuí de vacaciones y todo siguió su rumbo,
es más sacamos funcionalidades, las comunicamos y al volver no se tiene esa
sensación de &lt;a href="https://es.wikipedia.org/wiki/S%C3%ADndrome_FOMO" target="_blank" rel="noopener">FOMO&lt;/a> es la gloria.&lt;/p>
&lt;p>Te dejo la pregunta en el contexto de cuando volvés o alguien vuelve de vacaciones
y en la daily se escucha.&lt;/p>
&lt;blockquote>
&lt;p>Uff estuve revisando todos los emails y mensajes de slack para ponerme al día&lt;/p>
&lt;/blockquote>
&lt;p>¿No debería seguir su curso natural los proyectos sin que estés vos presente?&lt;/p>
&lt;h2>Explota las virtudes y reflexiona las mejoras, ambas son igual de importantes&lt;span class="hx-absolute -hx-mt-20" id="explota-las-virtudes-y-reflexiona-las-mejoras-ambas-son-igual-de-importantes">&lt;/span>
&lt;a href="#explota-las-virtudes-y-reflexiona-las-mejoras-ambas-son-igual-de-importantes" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Voy a decir una obviedad, todos tenemos cosas buenas y malas.&lt;/p>
&lt;p>Por favor cuando tengas 1.1 habla de ambas cosas, explota y recalcá las virtudes y reflexiona sobre
las mejoras, si solo resaltas las mejoras &amp;ldquo;o lo que hace mal&amp;rdquo; es angustiante
para la persona que está del otro lado, va a sentir que nada alcanza y nada hace bien.&lt;br>
Por el contrario, si solo resaltas las virtudes y no te tomas el tiempo para charlar sobre las mejoras
no vas a impulsar el cambio y mejora en la vida y carrera de la persona.&lt;/p>
&lt;p>De nuevo &lt;strong>explota las virtudes y reflexiona las mejoras, ambas son igual de importantes&lt;/strong>.&lt;/p>
&lt;h2>Se vos mismo, no gestiones desde lo libros&lt;span class="hx-absolute -hx-mt-20" id="se-vos-mismo-no-gestiones-desde-lo-libros">&lt;/span>
&lt;a href="#se-vos-mismo-no-gestiones-desde-lo-libros" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Por último y también puede ser una obviedad, pero se vos mismo, se siente a kilómetros
de distancia cuando alguien te está hablando desde un discurso preparado o desde
tips de un libro de liderazgo.&lt;/p>
&lt;p>Todos estamos y continuamos aprendiendo, vos también.&lt;/p></description></item><item><title>El infierno de los tickets</title><link>https://luispe.github.io/blog/es/blog/ticket-hell/</link><pubDate>Wed, 19 Jun 2024 19:10:20 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/ticket-hell/</guid><description>
&lt;h2>Problema&lt;span class="hx-absolute -hx-mt-20" id="problema">&lt;/span>
&lt;a href="#problema" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;em>Si solo tenés un martillo todos los problemas se parecen a un clavo&lt;/em>&lt;/p>
&lt;p>¿Por qué comienzo con esta conocida frase?, primero quiero dar un poco de historia y luego
voy a explicar el por qué la menciono.&lt;/p>
&lt;p>En los equipos de infraestructura en el cual llevo trabajando y liderando
algunos años tuve la gran fortuna de cruzarme con &lt;a href="https://www.linkedin.com/in/juanjosebehrend/" target="_blank" rel="noopener">Juanjo&lt;/a>.
Desde el minuto cero le escuche decir, promover y defender a capa y espada:&lt;/p>
&lt;p>&lt;em>- Nunca caigamos en un equipo de infraestructura que trabaje mediante pedidos por tickets&lt;/em>&lt;/p>
&lt;h2>Posicionamiento&lt;span class="hx-absolute -hx-mt-20" id="posicionamiento">&lt;/span>
&lt;a href="#posicionamiento" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>¿Cuál es el racional detrás de esta posición firme?&lt;/p>
&lt;ol>
&lt;li>Se tiene que tener una cultura extremadamente fuerte de punta a punta
para poder determinar que ticket es mas importante que otro.&lt;/li>
&lt;li>El equipo de infraestructura inherentemente tiene que crecer si el equipo de tecnología
y producto se expande a nuevas funcionalidades.&lt;/li>
&lt;li>Es extremadamente difícil mantener al equipo de infraestructura motivado.&lt;/li>
&lt;li>Es imposible innovar desde el equipo de infraestructura.&lt;/li>
&lt;/ol>
&lt;p>Existen varios motivos más, pero en este momento me parecen los mas destacables y avanzo
en explicar cada uno de ellos.&lt;/p>
&lt;h3>1. Cultura extremadamente fuerte&lt;span class="hx-absolute -hx-mt-20" id="1-cultura-extremadamente-fuerte">&lt;/span>
&lt;a href="#1-cultura-extremadamente-fuerte" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Tanto a los equipos de infraestructura como a los de QA no se los suele involucrar en el armado
de roadmap y sprint de tecnología y producto.
En caso que pase, se lo hace al final de la milla &amp;ldquo;cuando ya todo esta cocinado&amp;rdquo;.&lt;/p>
&lt;p>¿A donde apunto con esto?, que si al responsable de infraestructura le llegan dos tickets
y tiene que priorizar por cuestiones de capacidad de ejecución, la pregunta obvia:&lt;/p>
&lt;p>¿que ticket priorizo?&lt;/p>
&lt;p>Buena suerte cuando estés ahí, porque para los clientes lo de ellos es lo más importante del
mundo mundial y es lo más importante por sobre cualquier cosa.&lt;/p>
&lt;h3>2. Crecimiento sin sentido&lt;span class="hx-absolute -hx-mt-20" id="2-crecimiento-sin-sentido">&lt;/span>
&lt;a href="#2-crecimiento-sin-sentido" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Supongamos que el punto anterior esta resuelto, de este punto que voy
a explicar a continuación no se zafa.&lt;/p>
&lt;p>¿Por qué decimos que el equipo de infraestructura inherentemente tiene que crecer?&lt;/p>
&lt;p>Si caemos en tickets que solo resuelve el equipo de infraestructura a más productos y
funcionalidades que tenga la empresa más personas se necesitan del equipo de
infraestructura para atacar la demanda de tickets.&lt;/p>
&lt;p>Felicitaciones, creaste un embudo de ejecución.&lt;/p>
&lt;p>¿Solución?, contratar más talento para el equipo de infraestructura.&lt;/p>
&lt;h3>3. Motivación&lt;span class="hx-absolute -hx-mt-20" id="3-motivación">&lt;/span>
&lt;a href="#3-motivaci%c3%b3n" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Supongamos que el punto 1 y el 2 están resueltos.&lt;/p>
&lt;p>¿Los integrantes del equipo de infraestructura son humanos verdad?&lt;/p>
&lt;p>Digo esto porque es difícil mantener la motivación si &amp;mdash;en un trabajo
que es altamente impulsado por la creatividad&amp;mdash; acotamos a los integrantes del
equipo a &amp;ldquo;cerrar tickets&amp;rdquo; sin ningún lugar para la discusión o la doble pregunta.&lt;/p>
&lt;p>¿Que puede pasar?, rotación alta en el equipo de infra y un malestar en los equipos de tecnología
que, si son tóxicos, pueden acusar de bloqueantes o mala experiencia en la gestión
de infraestructura al equipo de infra.&lt;/p>
&lt;p>De esto último ¿que puede decirte?, Keep Calm y te dejo un gran abrazo.&lt;/p>
&lt;h3>4. Innovación&lt;span class="hx-absolute -hx-mt-20" id="4-innovación">&lt;/span>
&lt;a href="#4-innovaci%c3%b3n" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Por último si tenemos resueltos los anteriores 3 puntos es imposible innovar,
lisa y llanamente.&lt;/p>
&lt;p>¿Por qué?, un equipo que trabaja simplemente cerrando tickets, abocado solo a participar en
un proyecto creando infraestructura, es imposible que pueda innovar.&lt;/p>
&lt;h2>Volvamos al inicio&lt;span class="hx-absolute -hx-mt-20" id="volvamos-al-inicio">&lt;/span>
&lt;a href="#volvamos-al-inicio" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;em>Si solo tenés un martillo todos los problemas se parecen a un clavo&lt;/em>&lt;/p>
&lt;p>A lo largo de post explique el racional y los puntos mas importantes en los que va a impactar
una metodología de tickets para gestión de infraestructura.&lt;/p>
&lt;p>Y quiero dejar en claro que no está mal trabajar por tickets en un equipo de infraestructura,
&lt;strong>lo que si esta definitivamente mal es que la gestión de infraestructura se haga por tickets&lt;/strong>.&lt;/p>
&lt;p>¿Y que tiene que ver la frase del martillo?, que se implementó mal una metodología ágil en
muchos empresas con los equipos de infraestructura y &amp;ldquo;debemos parar la pelota&amp;rdquo; para reflexionar
porque no están funcionando bien las cosas en muchos lugares.&lt;/p>
&lt;p>¿Y cómo podemos evitarlo?&lt;/p>
&lt;p>Debemos inyectar una mentalidad de producto a los equipos de infraestructura, ofrecer
abstracciones con experiencias de primer nivel del caos de la plataforma subyacente para que
los equipos de tecnología de producto sean autosuficientes en la gestión del software
y la infraestructura asociada.&lt;/p>
&lt;p>Espero que mi experiencia te haga repensar como formar cultura y procesos
de trabajo para los equipos de infraestructura en la empresa si tenés dudas
o necesitas discutir algo de lo que escribí estoy encantado de conocerte :)&lt;/p>
&lt;p>¡Que pase bien! 👋🏽&lt;/p></description></item><item><title>Aniversarios</title><link>https://luispe.github.io/blog/es/blog/career/</link><pubDate>Fri, 02 Sep 2022 19:11:03 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/career/</guid><description>
&lt;p>Los aniversarios, puede ser un cumpleaños, fin año o cualquiera sea, en general lo llevan a uno llevan a reflexionar.&lt;/p>
&lt;p>Este caso no sería la excepción, ¿cuál es el aniversario?, hace menos de un mes cumplí un año en mi actual empresa
(&lt;a href="https://www.linkedin.com/company/pomelo-latam/mycompany/" target="_blank" rel="noopener">Pomelo&lt;/a>), el 29 de agosto del 2022 hicieron públicas las
promociones en la empresa, formo parte de las personas a las que ascendieron, quería escribir algunas conclusiones
que me llevo de estos más 365 días, dos equipos y un ascenso.&lt;/p>
&lt;h2>Pilares&lt;span class="hx-absolute -hx-mt-20" id="pilares">&lt;/span>
&lt;a href="#pilares" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Los que me conocen, sea en lo laboral o la vida personal, me escuchan hablar sobre tres principios, con los que trato
de movilizarme y busco a mi alrededor:&lt;/p>
&lt;ol>
&lt;li>Confianza&lt;/li>
&lt;li>Humildad&lt;/li>
&lt;li>Respeto&lt;/li>
&lt;/ol>
&lt;h3>Confianza&lt;span class="hx-absolute -hx-mt-20" id="confianza">&lt;/span>
&lt;a href="#confianza" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Voy a intentar explicar que significa para mí este pilar.&lt;/p>
&lt;p>En una de &lt;a href="https://luispe.github.io/blog/posts/mistakes-and-learnings/" target="_blank" rel="noopener">mis primeras publicaciones&lt;/a> donde hablo sobre
errores y aprendizajes, hablo sobre que ascender no debería ser la única o principal meta hay cosas muchísimo,
pero muchísimo más importantes y la confianza es una de ellas.&lt;/p>
&lt;p>Ok luispi, ¿pero qué tiene que ver con la confianza?, alla vamos.&lt;/p>
&lt;h4>Inicios&lt;span class="hx-absolute -hx-mt-20" id="inicios">&lt;/span>
&lt;a href="#inicios" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>Mi primer acercamiento a Pomelo fué por medio de &lt;a href="https://www.linkedin.com/in/marumoran/" target="_blank" rel="noopener">Maru&lt;/a>, ya nos conocíamos,
Maru fué quien hizo el proceso de hiring cuando entré en MercadoLibre, luego estuvimos cerca de reencontrarnos en
Naranja X, pero bien sirvió el impasse para reencontrarnos profesionalmente en Pomelo, esto lo cuento justamente por
el término de &lt;strong>confianza&lt;/strong>.&lt;/p>
&lt;p>¿Creen que Maru hubiese confiado en mí no solo una, sino dos veces?, yo creo que no, es una persona
absolutamente admirable en construir equipos de tecnología, y esa confianza que mutuamente nos tenemos hace que:&lt;/p>
&lt;ul>
&lt;li>Maru vuelva a confiar en mí una y otra vez y vuelva a convocarme.&lt;/li>
&lt;li>De mi lado tomar esa confianza depositada y construir (o intentar hacerlo) el mejor contexto de trabajo posible.&lt;/li>
&lt;/ul>
&lt;h4>Reencuentro y desencuentro&lt;span class="hx-absolute -hx-mt-20" id="reencuentro-y-desencuentro">&lt;/span>
&lt;a href="#reencuentro-y-desencuentro" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>En los más 365 días que llevo en Pomelo trabaje casi la mitad de tiempo en el equipo del Procesador, me reencontré
con caras conocidas y conocí algunas nuevas, ya voy a nombrarlas, primero la anécdota.&lt;/p>
&lt;p>En el Procesador estuve poco más de 5 meses, cumplimos el hito (locura) de tener en marcha el procesador y
luego mediando enero de 2022 me mude al equipo de infra.
Acá se jugaron dos pilares, confianza y respeto, ¿por qué digo esto?, los chicos supieron para donde quería dirigir
mi carrera y me apoyaron al 100%.&lt;/p>
&lt;p>No obstante 7 meses después me demostraron que son personas en las cuales voy a confiar infinitamente más allá
de Pomelo, estas personas son: &lt;a href="https://www.linkedin.com/in/victoria-rodr%C3%ADguez-brizi-61639a55/" target="_blank" rel="noopener">Brizi&lt;/a>,
&lt;a href="https://www.linkedin.com/in/damian-tundis/" target="_blank" rel="noopener">Dami&lt;/a> y &lt;a href="https://www.linkedin.com/in/nsarfati/" target="_blank" rel="noopener">Nico&lt;/a>, no voy a contar
los pormenores ellos saben a qué me refiero, pero quería agradecerles públicamente ❤️.&lt;/p>
&lt;h4>Con ustedes, a la guerra con un escarbadientes&lt;span class="hx-absolute -hx-mt-20" id="con-ustedes-a-la-guerra-con-un-escarbadientes">&lt;/span>
&lt;a href="#con-ustedes-a-la-guerra-con-un-escarbadientes" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>Hablé de mi primera etapa en Pomelo, pasemos a la segunda, &amp;ldquo;Migración al equipo de Infraestructura&amp;rdquo;.&lt;/p>
&lt;p>De enero a esta parte y desde el minuto cero &lt;a href="https://www.linkedin.com/in/juanjosebehrend/" target="_blank" rel="noopener">Juanjo&lt;/a> y &lt;a href="https://www.linkedin.com/in/gustavo-adrian-gimenez-4894589b/" target="_blank" rel="noopener">Gus&lt;/a>
y conociéndome, diría que nada, me dieron el espacio para crear un espacio de debate y repreguntas. Escucharon
mis propuestas, las hicieron suyas, y entre todos las llevamos adelante, me hicieron partes de las suyas las tome como
propias y así rodeado de una pila de personas con una calidad humana de otro planeta hicimos y estamos haciendo cosas
increíbles.&lt;/p>
&lt;p>¿Cuál es el punto de todo esto?, que ascender no sea la principal o única meta, generar confianza a tu alrededor es
incontable de veces más importante y es, al menos en los valores que persigo y busco, infinitamente superior a
cualquier puesto que ocupemos u obtengamos.&lt;/p>
&lt;p>Por ahora no quiero aburrir ni extenderme, pronto voy a escribir sobre los otros dos pilares que siento indispensables
para transitar la vida, humildad y respeto.&lt;/p></description></item><item><title>Deuda técnica</title><link>https://luispe.github.io/blog/es/blog/technical-debt/</link><pubDate>Sat, 02 Jul 2022 16:36:17 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/technical-debt/</guid><description>
&lt;p>En la siguiente publicación vamos a repensar un concepto comúnmente encontrado y avalado en la industria de la
tecnología, la deuda técnica.&lt;/p>
&lt;h2>Distinta vara&lt;span class="hx-absolute -hx-mt-20" id="distinta-vara">&lt;/span>
&lt;a href="#distinta-vara" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Imaginemos que necesitamos pintar el exterior de nuestra casa y decidimos contratar a un profesional para que realice el
trabajo.&lt;/p>
&lt;p>Después de consultar por varios presupuestos decidimos contratar los servicios de &amp;ldquo;x&amp;rdquo; para que se encargue del trabajo.&lt;/p>
&lt;p>Al cabo de unos dias &amp;ldquo;x&amp;rdquo; nos comenta:&lt;/p>
&lt;p>- &lt;em>El trabajo está terminado.&lt;/em>&lt;/p>
&lt;p>Nos paramos en el frente de la casa y notamos que alrededor de los marcos de la ventana no está pintado en algunos casos.&lt;/p>
&lt;p>Al notar esto le preguntamos a &amp;ldquo;x&amp;rdquo; porque no pinto alrededor de los marcos de la ventana, a lo que nos responde:&lt;/p>
&lt;p>- &lt;em>Disculpá, deuda técnica que la podemos atacar a futuro.&lt;/em>&lt;/p>
&lt;p>¿Qué sentirías si te encontrás con una situación asi?&lt;/p>
&lt;p>¿Por qué en el contexto de la tecnología avalamos tener deuda técnica?&lt;/p>
&lt;h2>Repensemos&lt;span class="hx-absolute -hx-mt-20" id="repensemos">&lt;/span>
&lt;a href="#repensemos" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>En tecnología es muy común encontrarnos con este escenario y lamentablemente lo naturalizamos y como comente en otra
&lt;a href="https://luispe.github.io/blog/posts/mistakes-and-learnings/" target="_blank" rel="noopener">publicación&lt;/a> donde hablo entre otras cosas sobre
la importancia de documentar y hacer test, es algo común que siempre veo como &amp;ldquo;deuda técnica&amp;rdquo;, repensando en el ejemplo
de pintar la casa creo que nos expone como podemos tener &amp;ldquo;distinta vara&amp;rdquo; para medir la misma situación en diferentes
contextos.&lt;/p>
&lt;p>¿Por qué es nociva la deuda técnica?&lt;/p>
&lt;ul>
&lt;li>En contexto de tests: es extremadamente difícil realizar cambios sin que explote todo.&lt;/li>
&lt;li>En contexto de documentación: es extremadamente difícil agregar funcionalidad porque la falta de documentación hace que
perdamos una cantidad enorme de tiempo tratando de entender como están construidas las cosas.&lt;/li>
&lt;li>En contexto de equipo: tener deuda técnica hace que el conocimiento quede en las personas y deberíamos siempre, siempre,
impulsar que el conocimiento esté distribuido.&lt;/li>
&lt;/ul>
&lt;h2>Conclusiones&lt;span class="hx-absolute -hx-mt-20" id="conclusiones">&lt;/span>
&lt;a href="#conclusiones" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>La deuda técnica es &lt;strong>muy agotadora&lt;/strong> para los equipos y donde hoy pensamos que estamos ganando tiempo te aseguro que pronto,
muy pronto, se pierde agilidad y velocidad en el desarrollo.&lt;/p>
&lt;p>Se puede evitar en la mayoría de los casos y no la aceptemos como algo natural.&lt;/p>
&lt;p>Para finalizar espero que repensemos juntos la &amp;ldquo;deuda técnica&amp;rdquo; y que nos incomode tenerla.&lt;/p>
&lt;p>¡Gracias por leerme! 👋🏽&lt;/p></description></item><item><title>Interfaces y "copy paste"</title><link>https://luispe.github.io/blog/es/blog/interfaces-correct-use/</link><pubDate>Mon, 20 Jun 2022 10:47:02 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/interfaces-correct-use/</guid><description>
&lt;p>En la siguiente publicación quiero compartir un error común que solía cometer en mis proyectos en Golang. Y como bien
dice el título y descripción hoy vamos a hablar de las interfaces.&lt;/p>
&lt;p>Seguramente se encuentren con algunas referencias a otra publicación que hice sobre
&lt;a href="https://luispe.github.io/blog/posts/hexagonal-architecture/" target="_blank" rel="noopener">arquitectura hexagonal&lt;/a>, creo que parte del mal uso de las
interfaces es la consecuencia de seguir a rajatabla publicaciones de &amp;ldquo;medium&amp;rdquo; y no tomarse el tiempo para entender el
concepto subyacente.&lt;/p>
&lt;h2>Preámbulo&lt;span class="hx-absolute -hx-mt-20" id="preámbulo">&lt;/span>
&lt;a href="#pre%c3%a1mbulo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Si hay algo que tenemos que admitir en el ecosistema de Golang es el enrosque que a veces nos damos con algunas/varias
cuestiones. Por dar un ejemplo en como nombrar las variables (que es un tema del que quiero hablar pronto) y en el
caso de hoy con las interfaces.&lt;/p>
&lt;p>Golang tiene sus particularidades, pero se basa en muchos patrones ya conocidos en la industria. En el ecosistema de Go
a veces complejizamos algunos patrones y caemos en &amp;ldquo;anti patrones&amp;rdquo;, en la siguiente publicación vamos a revisar un proyecto
falso y refactorizarlo para hacer un buen uso de las interfaces.&lt;/p>
&lt;p>Para simplificar un poco la publicación vamos a acotar el caso de uso y lo reduciremos a la capa de servicio y repositorio.&lt;/p>
&lt;p>Imaginemos que en la capa de repositorio nos encontramos con lo siguiente:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">repository&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// repository client and configs go here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewRepository&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">repository&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// previous logic here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">toModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">beerEntity&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Y en la capa de servicio lo siguiente:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>El anterior escenario es el que me encuentro comúnmente en los proyectos de Go y quiero comentarles que yo también supe
cometer el mismo error.&lt;/p>
&lt;p>Todo bien luispi, ¿pero cuál es el error?&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Las interfaces Go generalmente pertenecen al paquete que usa valores del tipo de interfaz, no al paquete que implementa
esos valores.&lt;/em> :scream_cat: :boom:&lt;/p>
&lt;/blockquote>
&lt;h2>Propuesta/aprendizaje&lt;span class="hx-absolute -hx-mt-20" id="propuestaaprendizaje">&lt;/span>
&lt;a href="#propuestaaprendizaje" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>&lt;em>El paquete de implementación debe devolver tipos concretos (generalmente puntero o estructura): de esa manera, se pueden
agregar nuevos métodos a las implementaciones sin requerir una refactorización extensa.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Con esto en mente vayamos a los bifes&lt;/p>
&lt;p>En primer lugar ataquemos la capa de repositorio, como bien dice la nota anterior vamos a retornar una estructura y
no la interfaz.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// repository client and configs go here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewRepository&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">Repository&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">beer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// previous logic here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">toModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">beerEntity&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Repasemos el cambio.&lt;/p>
&lt;p>En primer lugar, eliminamos la interfaz y ahora la función &lt;code>NewRepository()&lt;/code> retorna la estructura &lt;code>Repository&lt;/code>, y en segundo lugar
agregamos a &lt;code>Repository&lt;/code> el método save.&lt;/p>
&lt;p>Todo bien luispi, ¿pero qué ganamos con este cambio?&lt;/p>
&lt;p>Como no tenemos que cumplir con ningún contrato de interfaz no estamos atados a tener que implementar todos los métodos
que tenga la misma.&lt;/p>
&lt;p>Tenemos que pensar a este paquete como un productor (&lt;code>producer&lt;/code>) y siempre tengamos como nota mental que los &lt;code>producer&lt;/code>,
de nuevo, retornan tipos concretos (generalmente un puntero o una estructura).&lt;/p>
&lt;p>Ahora es el turno de editar la capa del consumidor (&lt;code>consumer&lt;/code>), en este caso el &lt;code>service&lt;/code>.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// pkg imports
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Repository&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">beer&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">repo&lt;/span> &lt;span class="nx">Repository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">Service&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">repo&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">svc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Service&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">beer&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Beer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createBeer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">svc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">repo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">beer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">createBeer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Repasemos el cambio.&lt;/p>
&lt;p>Realizamos varios cambios, en primer lugar declaramos la interfaz &lt;code>Repository&lt;/code> y en la estructura &lt;code>Service&lt;/code> inyectamos
la interfaz para que pueda consumirse en los métodos del servicio.&lt;/p>
&lt;p>Al igual que con la capa de repositorio nuestro &lt;code>NewService()&lt;/code> ahora retorna una estructura y no una interfaz.&lt;/p>
&lt;p>Por ultimo agregamos el método &lt;code>Create&lt;/code> a nuestro &lt;code>Service&lt;/code>.&lt;/p>
&lt;h2>Conclusiones&lt;span class="hx-absolute -hx-mt-20" id="conclusiones">&lt;/span>
&lt;a href="#conclusiones" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Con estos cambios sutiles pero poderosos nuestros &lt;code>producer&lt;/code> ahora tienen una enorme flexibilidad.&lt;/p>
&lt;p>Por último quiero agradecer a mi amigo y mentor &lt;a href="https://www.linkedin.com/in/morenojp/" target="_blank" rel="noopener">morenojp&lt;/a> que me compartió este
anti patrón y me hizo repensar y mejorar, una vez más, en esto del desarrollo de software.&lt;/p>
&lt;p>Para no aburrirte y por el momento hagamos una pausa.&lt;/p>
&lt;p>Próximamente vamos a seguir con pequeñas publicaciones donde vamos a intentar repensar otros anti patrones.&lt;/p>
&lt;p>¡Que pase bien!&lt;/p>
&lt;hr>
&lt;p>Fuentes:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments#interfaces" target="_blank" rel="noopener">wiki oficial de Golang&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://8thlight.com/blog/go-interface-misuse/" target="_blank" rel="noopener">go interfaces misuse&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Cuando el contexto importa</title><link>https://luispe.github.io/blog/es/blog/when-the-context-matter/</link><pubDate>Tue, 14 Jun 2022 18:45:35 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/when-the-context-matter/</guid><description>
&lt;p>La siguiente publicación se podría decir que es una continuación de otra donde hablamos de como tener imágenes livianas
nos ayuda en muchos aspectos, si aún no pudiste leerla acá te dejo
&lt;a href="https://luispe.github.io/blog/posts/lightweight-container-image/" target="_blank" rel="noopener">el acceso&lt;/a>.&lt;/p>
&lt;p>Hoy vamos a realizar una pequeña, pero importante mejora, y vamos a descubrir porque la estamos realizando.&lt;/p>
&lt;h2>Preámbulo&lt;span class="hx-absolute -hx-mt-20" id="preámbulo">&lt;/span>
&lt;a href="#pre%c3%a1mbulo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Como última propuesta en la publicación que compartí anteriormente nos quedamos en este punto:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code># First layer use to build a Golang binary
FROM golang:1.18-alpine3.16 AS builder
WORKDIR /build
COPY go.mod go.sum ./
RUN go mod download &amp;amp;&amp;amp; go mod verify
COPY . ./
RUN GOOS=linux go build -o ./myapp ./path/to/main
# Final layer expose app to minimal docker image
FROM alpine:3.16.0
COPY --from=builder /build/myapp /myapp
ENTRYPOINT [&amp;#34;/myapp&amp;#34;]&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Si tenemos como premisa que la tecnología de containers y su popularización con Docker es disruptiva es en gran medida
por los beneficios de poder construir en diferentes lugares y no encontrarnos con sorpresas cuando iniciamos la aplicación
que está contenida en el container, te invito a que pensemos durante unos segundos/minutos o el tiempo que necesitemos.&lt;/p>
&lt;p>¿Se puede realizar una mejora en la imagen para la aplicación de Golang?&lt;/p>
&lt;p>La respuesta es si, ¡manos a la obra!&lt;/p>
&lt;h2>Propuesta/aprendizaje&lt;span class="hx-absolute -hx-mt-20" id="propuestaaprendizaje">&lt;/span>
&lt;a href="#propuestaaprendizaje" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Golang posee una característica que es realmente poderosa, y no estoy hablando de las goroutines, y es la gran virtud de
poder realizar compilación cruzada.&lt;/p>
&lt;p>¿Qué es compilación cruzada?, es la característica de poder compilar desde un host con una determinada arquitectura y
sistema operativo (SO) el binario para otra arquitectura o SO.&lt;/p>
&lt;p>Entonces para ser un poco más específicos podemos desde un host con SO = linux y arquitectura = amd64, compilar un binario
para SO = windows, arquitectura = 386 :fire:.&lt;/p>
&lt;p>Imaginemos ahora que donde corremos los contenedores para nuestras aplicaciones el cómputo es linux como SO y con
arquitectura amd64.&lt;/p>
&lt;p>Con esto en mente realicemos una pequeña, pero importante mejora en nuestro Dockerfile.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code># First layer use to build a Golang binary
FROM golang:1.18-alpine3.16 AS builder
WORKDIR /build
COPY go.mod go.sum ./
RUN go mod download &amp;amp;&amp;amp; go mod verify
ENV GO111MODULE=on \
CGO_ENABLED=0 \
GOOS=linux \
GOARCH=amd64
COPY . ./
RUN go build -o ./myapp ./path/to/main
# Final layer expose app to minimal docker image
FROM alpine:3.16.0
COPY --from=builder /build/myapp /myapp
ENTRYPOINT [&amp;#34;/myapp&amp;#34;]&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Primero analicemos el cambio y porque lo realizamos.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>ENV GO111MODULE=on \
CGO_ENABLED=0 \
GOOS=linux \
GOARCH=amd64&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;code>CGO_ENABLED=0&lt;/code> desactivamos CGO&lt;/p>
&lt;p>&lt;code>GOARCH=amd64&lt;/code> indicamos la arquitectura&lt;/p>
&lt;p>&lt;code>GOOS=linux&lt;/code> indicamos el SO&lt;/p>
&lt;p>Todo bien luispi, ¿pero qué ganancia obtuvimos?&lt;/p>
&lt;p>Asegurarnos de compilar la aplicación para el entorno en el que va a ser ejecutado nos va a prevenir varios dolores de
cabeza o &amp;ldquo;troubleshooting&amp;rdquo;, y de más esta decir que ya no nos importa donde vamos a hacerlo (cualquiera sea nuestro canal
de integración continua), porque realizando la compilación, de nuevo, para el entorno en que va a ser ejecutado, nos
quedamos tranquilos de que estamos acortando el margen de contratiempos.&lt;/p>
&lt;p>Para no aburrirte y por el momento hagamos una pausa.&lt;/p>
&lt;p>¡Que pase bien! 👋🏽&lt;/p></description></item><item><title>El tamaño importa</title><link>https://luispe.github.io/blog/es/blog/lightweight-container-image/</link><pubDate>Sat, 11 Jun 2022 17:49:18 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/lightweight-container-image/</guid><description>
&lt;p>En la siguiente publicación voy a compartirles algunos consejos y buenas prácticas para desarrollar nuestras imágenes
de container, como ejemplo vamos a crear una imagen para una app en Golang, pero los siguientes consejos aplican
para cualquier lenguaje, ¡vamos!&lt;/p>
&lt;h2>Preámbulo&lt;span class="hx-absolute -hx-mt-20" id="preámbulo">&lt;/span>
&lt;a href="#pre%c3%a1mbulo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Perseguir que nuestras imágenes de container sean lo más reducida posible en cuanto a su peso (megabytes, gigabytes, etc)
no es una cuestión de gustos, nos ayuda en muchos aspectos, a continuación les comparto algunos:&lt;/p>
&lt;ul>
&lt;li>Reduce gastos de storage en el registry que utilizamos para gestionar nuestras imágenes.&lt;/li>
&lt;li>Cuando tengamos que obtener la imagen para iniciar el container queda claro que mientras más liviana sea más rápido
va a ser la inicialización del container, y con esto ganamos en dos puntos.
&lt;ul>
&lt;li>Costos, y con costos nos referimos al uso del networking que utilicemos para obtener la imagen y luego inicializar
el container.&lt;/li>
&lt;li>Velocidad en auto scaling, está claro que obtener una imagen de 20 MB versus una de 900 MB la primera, claro está, va a
inicializarse con mayor velocidad.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Por dar algunos ejemplos.&lt;/p>
&lt;h2>Comencemos&lt;span class="hx-absolute -hx-mt-20" id="comencemos">&lt;/span>
&lt;a href="#comencemos" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Imaginemos que tenemos el siguiente Dockerfile para crear nuestra imagen de container e.g:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Construyamos nuestra imagen &lt;code>docker build -t myapp:0.0.1 .&lt;/code>&lt;/p>
&lt;p>Si listamos las imágenes que tengamos en nuestro host vamos a poder observar que el peso es de aproximadamente &lt;code>968 MB&lt;/code>&lt;/p>
&lt;p>What? 968 MB solo para disponibilizar un binario que pesa unos pocos megas?&lt;/p>
&lt;blockquote>
&lt;p>NOTA&lt;/p>
&lt;p>En todas mis publicaciones vas a encontrarte con conceptos, la idea es que aprendamos y no copiemos y peguemos.
Por dar un ejemplo &lt;code>RUN go build -o ./myapp ./path/to/main&lt;/code> donde &lt;code>./path/to/main&lt;/code> debería estar el main de tu app de
Golang&lt;/p>
&lt;/blockquote>
&lt;h2>Propuesta/aprendizaje&lt;span class="hx-absolute -hx-mt-20" id="propuestaaprendizaje">&lt;/span>
&lt;a href="#propuestaaprendizaje" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>Vamos con la primera propuesta.&lt;span class="hx-absolute -hx-mt-20" id="vamos-con-la-primera-propuesta">&lt;/span>
&lt;a href="#vamos-con-la-primera-propuesta" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Siempre es una buena práctica usar imágenes &lt;code>-alpine&lt;/code>, por convención en el universo de container cuando disponibilizamos
una imagen &lt;code>-alpine&lt;/code> estamos indicando al cliente que es una imagen reducida en tamaño y la que deberíamos utilizar en
nuestro Dockerfile, entre otras cosas.&lt;/p>
&lt;p>Bien, realicemos un pequeño cambio en nuestro Dockerfile y volvamos a construir nuestra imagen&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Si prestamos atención el cambio fue sutil, pero efectivo, pasamos de &lt;code>FROM golang:1.18&lt;/code> a &lt;code>FROM golang:1.18-alpine3.16&lt;/code>&lt;/p>
&lt;p>Construyamos nuevamente nuestra imagen &lt;code>docker build -t myapp:0.0.2 .&lt;/code>&lt;/p>
&lt;p>Si volvemos a listar las imágenes nos vamos a encontrar con que ahora la imagen &lt;code>myapp:0.0.2&lt;/code> pesa aproximadamente &lt;code>331 MB&lt;/code>&lt;/p>
&lt;p>Reducimos, si las cuentas no fallan, 637 MB.&lt;/p>
&lt;p>Es una excelente &amp;ldquo;approach&amp;rdquo; pero repensemos. ¿Hace falta tener una imagen con todo Golang dentro del container pesando
cerca de 331 MB para disponibilizar un binario que pesa unos cuantos megabytes?.&lt;/p>
&lt;p>La respuesta es claramente, no.&lt;/p>
&lt;h3>Segunda propuesta&lt;span class="hx-absolute -hx-mt-20" id="segunda-propuesta">&lt;/span>
&lt;a href="#segunda-propuesta" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>La tecnología de container tiene una característica excelente, que para nuestro caso, nos va a ayudar a construir una
imagen de container muy liviana, por si no lo sabías, estoy hablando de Multistage, te comparto la
&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noopener">documentación oficial&lt;/a> para que profundices sobre esta
característica.&lt;/p>
&lt;p>¿En qué consiste Multistage?, se trata de construir imágenes por etapas pudiendo así compartir datos entre cada una de
ellas y vamos a obtener una imagen final de un tamaño muy pequeño.&lt;/p>
&lt;p>Lo primero que vamos a hacer es tener una primera etapa de build, donde vamos a construir el binario, y una segunda
etapa donde vamos a dejarlo disponible para utilizarlo.&lt;/p>
&lt;p>Manos a la obra, abramos y realicemos las siguientes modificaciones a nuestro Dockerfile.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># First layer use to build a Golang binary&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> golang:1.18-alpine3.16 AS builder&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> go mod verify&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o ./myapp ./path/to/main&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Final layer expose app to minimal docker image&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> alpine:3.16.0&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>builder /build/myapp /myapp&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;/myapp&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Como podemos observar la primera modificación consiste en taguear la primera etapa como build.
Luego en la segunda y etapa final con la siguiente línea &lt;code>COPY --from=builder /build/myapp /myapp&lt;/code> copiamos el binario
desde la etapa que tagueamos como &lt;code>builder&lt;/code> y lo disponibilizamos en una imagen alpine.&lt;/p>
&lt;p>Si listamos ahora nuestras imágenes podemos observar que pesa aproximadamente 9 MB, si si, escribi correctamente
9 megabytes :sunglasses:.&lt;/p>
&lt;p>Podríamos realizar una última optimización o buena práctica, pero creo que vale la pena dejarlo para otra publicación.&lt;/p>
&lt;p>Para no aburrirte y por el momento hagamos una pausa.&lt;/p>
&lt;p>¡Que pase bien!&lt;/p></description></item><item><title>Hexagonal Architecture</title><link>https://luispe.github.io/blog/es/blog/hexagonal-architecture/</link><pubDate>Thu, 09 Jun 2022 21:53:34 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/hexagonal-architecture/</guid><description>
&lt;p>Esta es la primera de una serie donde vamos a revisar diferentes patrones de desarrollo que errores cometí y cuál es
en la actualidad y lo que entiendo hasta el momento, la mejor forma de aplicarlo.&lt;/p>
&lt;p>Como bien dice el título de la publicación hoy quiero hablar sobre arquitectura hexagonal.&lt;/p>
&lt;h2>Preámbulo&lt;span class="hx-absolute -hx-mt-20" id="preámbulo">&lt;/span>
&lt;a href="#pre%c3%a1mbulo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Hace tiempo noto mucho &amp;ldquo;hype&amp;rdquo; en torno a la arquitectura hexagonal y me gustaría ser claro al respecto, no estoy en contra,
mas bien todo lo contrario, me parece un excelente patrón.&lt;/p>
&lt;p>Pero creo que caemos en el error de aplicar la recetas de publicaciones de &amp;ldquo;medium&amp;rdquo; y no solo terminamos con todas las
capas de nuestro sistema acopladas sino que con nombres de packages al estilo &amp;ldquo;adapters&amp;rdquo; o &amp;ldquo;ports&amp;rdquo; y si hay algo hermoso
en el lenguaje de Go(lang) es la intencionalidad en el nombre de un package.&lt;/p>
&lt;blockquote>
&lt;p>Un buen nombre en el package hace que casi ni sea necesario nada más para expresar la intencionalidad del mismo.&lt;/p>
&lt;/blockquote>
&lt;p>Te comparto y recomiendo leer la siguiente &lt;a href="https://go.dev/blog/package-names" target="_blank" rel="noopener">publicación oficial&lt;/a>, opinión personal,
aplica para cualquier lenguaje.&lt;/p>
&lt;h2>Comencemos&lt;span class="hx-absolute -hx-mt-20" id="comencemos">&lt;/span>
&lt;a href="#comencemos" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Anti patrón&lt;/p>
&lt;p>Anotación en nuestro modelo de dominio e.g &lt;code>json&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>Un error que solía cometer es tener las anotaciones &lt;code>json&lt;/code> o &lt;code>gorm&lt;/code> o cualquier anotación en el modelo de dominio.&lt;/p>
&lt;p>Imaginemos que tenemos nuestro modelo &lt;code>/user/user.go&lt;/code> con el siguiente contenido&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;first_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;last_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Antes de continuar leyendo te invito a que por unos segundos/minutos hagamos una reflexión de porque es un anti patrón.&lt;/p>
&lt;h2>Propuesta/aprendizaje&lt;span class="hx-absolute -hx-mt-20" id="propuestaaprendizaje">&lt;/span>
&lt;a href="#propuestaaprendizaje" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Nuestro modelo debería ser agnóstico a la capa de presentación y a la de datos, por lo tanto, no debería contener ninguna
anotación. Deberíamos mapear los datos hacia nuestro modelo y viceversa, a continuación un ejemplo de como quedaría
un controlador rest HTTP e.g.:&lt;/p>
&lt;p>&lt;code>user/rest_controller.go&lt;/code>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">UserDTO&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;first_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;last_name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">toUserModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userDTO&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserDTO&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userDTO&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FirstName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">userDTO&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">LastName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ctrl&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">toUserDTO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">User&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UserDTO&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">UserDTO&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FirstName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">LastName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Como podemos ver en el ejemplo anterior los metodos privados en el controlador rest mapean desde el &lt;code>data transfer object&lt;/code>
hacia el modelo de dominio cuando llamemos al servicio y viceversa.&lt;/p>
&lt;p>Por último quitamos las anotaciones en nuestro modelo &lt;code>user/user.go&lt;/code>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FirstName&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LastName&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Todo bien luispi, ¿pero qué ganancia obtuvimos?&lt;/p>
&lt;p>Ahora nuestro &lt;code>/user/user.go&lt;/code> al no tener ninguna anotación no importa como presentemos o como obtengamos/persistamos
los datos, nunca vamos a tocar el core/dominio de nuestra aplicación, ahora si podríamos afirmar que nuestro core/dominio
es agnóstico a las capas de presentación o datos ganando flexibilidad, testabilidad, etc.&lt;/p>
&lt;p>Para no aburrirte y por el momento hagamos una pausa.&lt;/p>
&lt;p>Próximamente vamos a seguir con pequeñas publicaciones donde vamos a intentar repensar otros anti patrones.&lt;/p>
&lt;p>¡Que pase bien!&lt;/p></description></item><item><title>De los errores se aprende, si se comparten, se crece</title><link>https://luispe.github.io/blog/es/blog/mistakes-and-learnings/</link><pubDate>Sun, 05 Jun 2022 21:53:34 -0300</pubDate><guid>https://luispe.github.io/blog/es/blog/mistakes-and-learnings/</guid><description>
&lt;p>En nuestra sociedad en general y en tecnología en particular tenemos la extraña costumbre de publicar los aciertos
(opinión de quien redacta, mal llamado &lt;strong>caso de éxito&lt;/strong>) y pocas, por no decir nulas, las ocasiones donde se comparten los
errores (opinión de quien redacta, mal llamado &lt;strong>fracaso&lt;/strong>).&lt;/p>
&lt;p>Como estarás sospechando a continuación voy a compartir algunos errores, que aprendí de ellos y más aún cuanto crecí y
entendí de la industria al compartirlos.&lt;/p>
&lt;h2>Enseñanza 1:&lt;span class="hx-absolute -hx-mt-20" id="enseñanza-1">&lt;/span>
&lt;a href="#ense%c3%b1anza-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Escribir un paso a paso, compartirlo, validarlo y re-validarlo antes de ejecutar nada&lt;/p>
&lt;/blockquote>
&lt;p>Mi primer desarrollo productivo fue en 2012 (?) aproximadamente, se trató de una web para una empresa que necesitaba
publicar su catálogo de productos, enumero tecnologías para tener un poco de contexto:&lt;/p>
&lt;ul>
&lt;li>digitalocean, recién salido, además de los droplets no se cuantos productos más tenía en cartera&lt;/li>
&lt;li>angular js (angular 1)&lt;/li>
&lt;li>creo que nodeJS para el backend&lt;/li>
&lt;/ul>
&lt;p>Este desarrollo lo hice con quien es una de las personas que más respeto y admiro, Víctor De Grandis –Vitor–.&lt;/p>
&lt;p>Mi experiencia configurando servidores era nula, tuve la delirante idea de decirle a Vitor:&lt;/p>
&lt;p>&lt;em>che amigo, ¿puedo configurar el servidor y después intentas romperlo?&lt;/em>&lt;/p>
&lt;p>Acto seguido me pongo a realizar varias configuraciones entre ellas me puse a jugar con los puertos, hasta que muy
orgulloso le digo:&lt;/p>
&lt;p>&lt;em>Vitor, probá a ver qué onda&lt;/em>&lt;/p>
&lt;p>Después de un rato me llega un mensaje,&lt;/p>
&lt;p>&lt;em>amigo ¿puede ser que cerraste el puerto 22?&lt;/em>&lt;/p>
&lt;p>Hermoso, salí de la casa, cerré la puerta y tiré la llave a una laguna.&lt;/p>
&lt;p>Como la gente de digitalocean está preparada para personas como quien redacta, tiene una funcionalidad que si se accede
desde la web (no tengo mucha idea como se resuelve por detrás) podes ejecutar una terminal en el navegador y acceder al droplet.&lt;/p>
&lt;p>Configure de nuevo los puertos, y el resto medio que es historia.&lt;/p>
&lt;h2>Enseñanza 2:&lt;span class="hx-absolute -hx-mt-20" id="enseñanza-2">&lt;/span>
&lt;a href="#ense%c3%b1anza-2" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Documentar el conocimiento por más trivial que lo consideremo e invitemos a que el resto lo haga. Además de evitar
varias reuniones de “transferencia de conocimiento” nos vamos a ahorrar varios arrobas, ¿te recuerda algo?&lt;/p>
&lt;p>@fulanito puede darte una mano&lt;/p>
&lt;/blockquote>
&lt;p>En otro equipo que tuve la fortuna de trabajar, pequeño en cantidad de personas pero de las cuales aprendí mucho mucho
de cada una de ellas, lamentablemente la aventura fue muy corta en tiempo.&lt;/p>
&lt;p>Lo que sí me extrañó mucho a medida que uno a uno se iba yendo gente del equipo es que perdíamos mucho conocimiento a
punto tal de parar motores (literal) y estar semanas sin entregar funcionalidades a producción porque tuvimos que sentarnos
a entender cómo dejar esa línea de código local y exponerla a internet.&lt;/p>
&lt;p>¿Qué errores detecte y que aprendí?&lt;/p>
&lt;p>Documentar el conocimiento, por más trivial que lo consideremos, documentarlo.&lt;/p>
&lt;p>O acaso, y te invito a pensar durante unos segundos. ¿te encontraste una o más veces haciendo reuniones de
“knowledge transfer” porque alguna persona estaba dejando el equipo?&lt;/p>
&lt;p>¿o acaso eras vos quien lo estaba dejando?&lt;/p>
&lt;h2>Enseñanza 3:&lt;span class="hx-absolute -hx-mt-20" id="enseñanza-3">&lt;/span>
&lt;a href="#ense%c3%b1anza-3" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;blockquote>
&lt;p>Ascender no debería ser la única o principal meta, compartir y adquirir conocimiento debería ser la guía.&lt;/p>
&lt;p>Enseñanza 3 bis:&lt;/p>
&lt;p>Pensar y realizar pruebas antes de implementar cualquier cosa es una guía fundamental para entender el comportamiento de
nuestros sistemas o del conocimiento del dominio que tenemos hasta el momento. Siempre y repitamos, &lt;strong>siempre&lt;/strong>,
es una ganancia en el tiempo.&lt;/p>
&lt;/blockquote>
&lt;p>Por último y en otro lugar que trabajé, conocí a una de las personas que mejor resuelve problemas,
&lt;a href="https://www.linkedin.com/in/morenojp/" target="_blank" rel="noopener">Juan Moreno&lt;/a>, ¿qué es mejor para mí?, soluciones simples a problemas complejos.&lt;/p>
&lt;p>Después de este pequeño paréntesis y dedicatoria a quien hoy es una de mis fuentes de consulta, voy a intentar explicar
la enseñanza número 3 y 3 bis.&lt;/p>
&lt;p>En los tiempos pre pandemia, solía –costumbre que aun conservo desde lo remoto– arrancar temprano, tener un par de horas
“a solas” me permite focalizar y priorizar en la medida de lo posible las cosas que quiero y me comprometí a realizar.&lt;/p>
&lt;p>Una de esas mañanas y en consecuencia a una funcionalidad que estábamos desarrollando en el equipo el líder llegó un
poco enojado (por ser amable) y agarró a los primeros que encontró del equipo, pudiendo así descargar su enojo porque
había “quedado mal” ante sus superiores porque de todas las casuísticas había un caso que rompía.&lt;/p>
&lt;p>Famoso &lt;em>Take a breath&lt;/em> y al cabo de unos minutos me junte con él a solas, le hice una pregunta:&lt;/p>
&lt;p>&lt;em>¿cuántas personas están involucradas en esta funcionalidad?&lt;/em>&lt;/p>
&lt;p>Entendió con la pregunta que debía haber esperado y comentarle a todo el equipo responsable lo que había pasado y
no agarrar a los primero que se cruzó en el camino.&lt;/p>
&lt;p>Por último le dije que comprendía pero no compartía su enojo ni como lo había manejado.&lt;/p>
&lt;p>Quiero aclarar que mi intención no es juzgar, sino compartir que aprendí de ese error, de nuevo:&lt;/p>
&lt;blockquote>
&lt;p>Ascender no debería ser la única o principal meta, se corre el riesgo de estar bajo una enorme presión por no estar a
la altura de las circunstancias. Compartir y adquirir conocimiento debería ser la guía.&lt;/p>
&lt;p>Pensar y realizar test antes de implementar cualquier cosa es la guía fundamental para entender el comportamiento
de nuestros sistemas o del conocimiento del dominio que tenemos hasta el momento. Siempre y repitamos, &lt;strong>siempre&lt;/strong>,
es una ganancia en el tiempo.&lt;/p>
&lt;/blockquote>
&lt;p>Para finalizar entiendo que voy a seguir cometiendo errores y compartiendo la experiencia que me dejaron,
eso no me hace ni peor ni mejor que nadie.&lt;/p>
&lt;p>Estoy convencido que es una sana manera de transitar la vida donde lo “normal” es mostrarnos “exitosos” o
como me gusta hacer paralelismos con el fútbol, “jugar para la tribuna”, pero a fin de cuenta es solo una apariencia.&lt;/p>
&lt;p>¡Gracias por leerme! 👋🏽&lt;/p></description></item></channel></rss>